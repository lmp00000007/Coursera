Привіт. Я Боб Седжвік, професор
комп'ютерних наук у Прінстоні. Це наш онлайн курс "Алгоритми", що створений
мною і Кевіном Уейном тут у Прінстоні. Ми почнем з оглядового обговорення щодо
того, чому ви могли б захотіти вивчати алгоритми і трохи обговоримо те,
які ресурси вам потрібні для цього курсу. Ітак, що це за курс? Це
оглядовий курс середнього рівня з алгоритмів. Ми сконцентруємось на
програмування і вирішенні задач в в контексті реального застосування,
і сфокусуємось на двох речах: алгоритмах, як методах вирішення
задач, і структурах даних, які зберігають інформацію, пов'язану з задачею,
і які йдуть рука в руку з алгоритмами. Це основні теми,
що покривають першу і другу частини курсу. Перша частина - це сортування
та пошук у даних. Ми розглянемо кілька структур даних та алгоритмів,
які є базовими у всіх методах, що що ми розглянемо, це стеки, черги, множини
та черги з приорітетом. Потім ми розглянемо класичні алгоритми сортування, вставки
елементів у деякому порядку. Як от швидке сортування злиттям, пірамідальне та порозрядні сортування.
І розглянемо класичні алгоритми для пошуку. Включаючи бінарні дерева пошуку,
червоно-чорні дерева пошуку та хеш-таблиці. У другій частині курсу
будуть більш просунуті алгоритми накшталт алгоритмів на графах, класичних алгоритмів
пошуку у графах, мінімальні кістякові дерева і алгоритми пошуку найкоротшого шляху,
алгоритми обробки рядків, включаючи регулярні вирази і стиснення даних. І тоді
більш просунуті алгоритми, які застосовують замість базових алгоритмів, що ми розгядали
на початку курсу. Отже, нащо нам вивчати алгоритми? Отже, їх вклад,
вплив дуже широкий та далекоосяжний. Від інтернету до біології,
комерції, комп'ютерної графіки, безпеки, мультимедіа, соціальних мереж, і
наукового застосування, алгоритми навколо нас. Їх використовують для фільмів
та ігор, для симуляції зіткнення частинок, їх застосовують для
вивчення геному, та й для всього іншого. Отже, одна з найважливіших
причин вивчати алгоритми у томму, що їх вплив широкий та далекоосяжний. Алгоритми,
до того ж, цікаво вивчати, бо вони мають глибоке коріння. Тепер перший
алгоритм, що ми знаємо, датують 300 р. до н.е., і приписують Евкліду.
Концепцію алгоритму формалізували фактично тут, у Прінстоні, Черч
і Тьюрінг у 1930-х. Але більшість алгоритмів, які ми розглянемо, були винайдені в
останні десятиліття. По факту, деякі з них були винайдені студентами, що вивчали
подібний курс. І існує надзвичайно багато інших алгоритмів, які чекають, щоб їх винайшли
такі студенти як ви. Основна причина, чому люди вичають алгоритми у тому, щоб мати
можливість вирішувати задачі, які не можуть бути вирішені по-іншому. Наприклад, у
першій лекції ми поговоримо про задачу зв'язності у мережі, коли дана
велика кількість елементів, які з'єднані одне з одним попарно, і потрібно
дізнатись, чи є шлях від одного елемента до іншого використовуючи ці з'єдання між елементами. Як
ви бачите на цьому прикладі, не є очевидним є чи немає такого шляху, нам потрібна
комп'ютерна програма, щоб це з'ясувати, до того ж, там потрібен ефективний алгоритм для
цього. У цьому випадку відповідь така - шлях існує. Іншою причиною вивчати
алгоритми є інтелектуальний стимул. Алгоритми є дуже
цікавим об'єктом для вивчення. Дон Кнут, який написав кілька книг з алгоритмів
і був одним з піонерів у цій області, сказав: "Алгоритм потрібно побачити, щоб у нього
повірити." Ви не можете тільки думати про алгоритм, ви повинні працювати з ним.
Інша цитата від Френсіса Салівана: "Чудові алгоритми - це поезія світу
обчислень." Як і вірші, вони можуть короткими, незрозумілими, і навіть
таємничими. Але одного разу відкриті, вони яскраво освітлюють деякі аспеки
обчислень. Алгоритми цікаві для інтелектуального симулювання. Інша причина,
чому багато людей вивчають алгоритми, і, я думаю, в тому числі багато з вас, це необхідність
розуміти гарні алгоритми, ефективні алгоритми, гарні структури даних,
щоб бути професійними програмістами. Лінус Торвальдс, який створив Лінукс, сказав,
що різниця між поганим програмістом і гарним у тому, що один
більш прискіпливо обдумує свій код, а інший - структури даних. Погані програмісти хвилюються
про свій код, гарні програмісти хвилюються про свої структури даних і їх
зв'язок. І, я маю додати, про алгоритми, що їх використовують. Ніколаус
Вірт, інший піонер комп'ютерних наук, написав відому книгу, яка назвається
"Алгоритми + Структури даних = Програми" [кашель]. Іншою причиною вивчати
алгоритми у наш час є те, що вони стали простою мовою для розуміння природи.
Алгоритми є обчислювальними моделями і алгоритмічні моделі замінюють
математичні моделі у наукових питаннях. У двадтятому столітті математики
розробляли математичні моделі, щоб спробувати зрозуміти природні явищі. І скоро
стало зрозуміло, що ці математичні моделі складно розв'язувати. Було
складно створювати рішення, щоб можна було перевіряти гіпотези щодо природних
явищ. Отже, все більше, більше і більше днів зараз люди розробляють обчислювальні
моделі, коли намагаються імітувати, що може статись у природі, щоб
спробувати краще її зрозуміти. Алгоритми грають неймовірно важливу роль у цих
процесах. В ми побачимо кілька прикладів цього у цьому курсі. Інша важлива причина
у тому, що якщо ви знаєте як воно працює, як ефективніше використовувати алгоритми і 
структури даних, ви будете мати більше шансів на співбесіді на роботу у сфері
технологій, ніж якщо ви цього знати не будете. Отже, ось жмут причин, які я
назвав, щоб вчити алгоритми. Їх вплив широкий і далекоосяжний,
вони мають давні корені і дарують нові можливості, вони дозволяють нас
вирішувати задачі, які не можна інакше вирішити, ви можете використати їх для
інтелектуального стимулу, щоб стати професійним програмістом. Вони можуть
відкрити секрети життя у всесвіті, і вони чудовий спосіб отримати задоволення і користь.
Насправді, програміст може спитати, нащо ж вчити ще щось? Добре, є багато гарних
причин, щоб вчити інші речі, але я думаю, немає гарної причини не вивчати
алгоритми. [кашель] Отже, для цього курсу є два ресурси, про які я хотів би
поговорити і впевнитись, що люди знайомі з ними, перед тим, як братись
до справи. Це видавчнича модель, яку Кевін Уейн та я розробили і використовуємо
вже багато років, і ми думаємо, що це дуже ефективний шлях підтримки таких
лекцій, які ми будемо давати у цьому курсі. Взагалі-то це
необов'язково для цього курсу, але існує підручник. Це традиційний підручник (text book),
який у значній мірі покриває теми курсу, насправді навіть більше тем, ніж ми
можемо представити у лекціях. І є безкоштовні онлайн матеріали, які ми назвали
сайтом книги (book site), для підтримки книги. Ви можете користуватись книгами, сайтом книги,
щоб дивитись слайди лекцій. Але більш важливим є код, вправи, дуже велика
частина інформації саме тут. Насправді десь у десять разів більше, ніж у книзі,
включаючи короткий зміст. Отже, від час курсу ви будете звертатись до сайту
книги доволі часто, коли працюватимете онлайн. Люди часто запитують про
попередні вимоги. Ми вважаємо, що люди які беруться за цей курс, знають як
програмувати і знають основи циклів, массивів функцій. Вони мають деякі знання об'єктно-
орієнтованого програмування та рекурсії Ми використовуєм мову Java, але ми не зупиняємось
на її деталях, а головним чином використовуємо її як мову для демонстрації. Ми використовуєм
математику, але не вищу математику. Якщо ви хочете продивитися матеріал, що ми вважаємо
попередніми вимогами для цього курсу, ви можете проглянути
розділи 1.1 та 1.2 у книзі. Чи на сайті книги, чи у підручнику.
Якшо хочете більш глибоко ознайомитись, то у нас є цілий підручний, який називається
"An Introduction to Programming in Java: An Interdisciplinary Approach". Є і
сайт книги в додачу до самої книги. Але суть у тому, що ви повинні вміти
програмувати, і вправою на це є написання програми на Java на вашому
комп'ютері, можливо використовуючи програмну модель, що описана на сайті книги. Ми
дамо більш детальну інформацію для цього, коли приступимо до завдань.
Ви можете використати власне програмне середовище, якщо вам зручно, чи
завантажити наше. Ми дамо інструкції в інтереті щодо того як це зробити.