1
00:00:09,035 --> 00:00:15,063
Okay, quindi il primo passo è essere in grado
di fare alcune osservazioni sul tempo di

2
00:00:15,063 --> 00:00:22,004
esecuzione dei programmi. E per l'analisi degli
algoritmi ciò è più semplice che in molte altre

3
00:00:22,026 --> 00:00:27,096
discipline scientifiche, come vedremo. Useremo
come esempio il cosiddetto

4
00:00:27,096 --> 00:00:34,016
problema 3-sum, o problema 3-somme. Ed è un problema
facile da formulare. Dati N interi distinti,

5
00:00:34,016 --> 00:00:40,254
quanti gruppi di tre interi se sommati danno come
risultato zero? Per esempio in questo file 8ints.text

6
00:00:40,254 --> 00:00:48,096
che contiene otto interi ci sono quattro gruppi
di tre interi che hanno come somma zero.

7
00:00:48,096 --> 00:00:56,832
(30, -40, 10), (30, -20, -10) e così via.
Perciò il nostro obiettivo è scrivere un programma che

8
00:00:56,832 --> 00:01:03,554
calcoli questo valore per qualsiasi file in input, ovvero
qualsiasi insieme di N interi. Questo è

9
00:01:03,554 --> 00:01:09,796
a dire il vero un calcolo veramente
importante che è profondamente correlato a molti

10
00:01:09,796 --> 00:01:16,446
problemi in geometria computazionale che è
un ramo dell'informatica che si occupa

11
00:01:16,446 --> 00:01:24,536
degli algoritmi e della scienza su cui si basano
legati alla grafica, i film e

12
00:01:24,536 --> 00:01:32,040
modelli geometrici di ogni tipo. Quindi questo è
effettivamente un importante problema pratico.

13
00:01:32,040 --> 00:01:40,459
Ma è un problema semplice da risolvere
con la programmazione. Potreste scrivere questo programma

14
00:01:40,759 --> 00:01:49,583
senza troppe difficoltà. C'è un metodo statico
"count" che prende in input

15
00:01:49,583 --> 00:01:56,317
un array di interi. N è il numero di interi

16
00:01:56,317 --> 00:02:02,660
ovvero è la lunghezza dell'array. Definiamo
una variabile count con valore zero.

17
00:02:02,660 --> 00:02:09,363
E quindi una serie di tre cicli for annidati, che controllano
ogni possibile gruppo di tre interi. i varia tra 0 e N

18
00:02:09,363 --> 00:02:15,181
j varia tra i+1 e N. k varia da j+1 a N. In questo
modo controlliamo ogni gruppo di tre interi solo una volta.

19
00:02:15,181 --> 00:02:19,818
E poi se a[i] + a[j] + a[k] = 0 allora
incrementiamo count. E dopo

20
00:02:19,818 --> 00:02:25,093
i tre cicli for annidati ritorniamo count.
Quindi il metodo main, trattandosi di una

21
00:02:25,093 --> 00:02:30,769
classe molto semplice, si limita a leggere tutti gli
interi e a stampare il valore restituito da count.

22
00:02:30,769 --> 00:02:35,696
Questo è un esempio di algoritmo brute force, o algoritmo a
forza bruta che risolve il problema 3-sum.

23
00:02:35,696 --> 00:02:41,615
Ma adesso siamo interessati a sapere quanto
tempo impiega in funzione di N.

24
00:02:41,615 --> 00:02:47,808
Beh, un modo di verificare quanto tempo impiega
è semplicemente guardare all'orologio, se avete un

25
00:02:47,808 --> 00:02:54,925
cronometro, oppure guardare all'orologio del
vostro smartphone o qualcosa di simile.

26
00:02:54,925 --> 00:03:02,164
Se volete potete così prendere il tempo.
Oppure Java ha questa parte della sua

27
00:03:02,164 --> 00:03:09,024
libreria standard, una classe Stopwatch, che in italiano
significa cronometro, che ritorna il tempo trascorso dalla sua creazione.

28
00:03:09,024 --> 00:03:15,968
Perciò, ogni volta che eseguite un programma
se è fatto in modo da accettare un input di

29
00:03:15,968 --> 00:03:23,990
dimensioni variabili, potete eseguirlo con dimensioni
via via sempre più grandi. Quindi per otto

30
00:03:23,990 --> 00:03:32,381
interi il programma richiede non troppo tempo.
Per 1000 interi impiega mezzo secondo. Per

31
00:03:32,381 --> 00:03:42,303
2000 richiede più tempo, circa 3,7 secondi.
Eseguiamolo di nuovo, ancora circa 3,7 secondi.

32
00:03:42,303 --> 00:03:50,231
Perciò ogni volta che raddoppiamo la dimensione
dell'input questo richiede

33
00:03:50,231 --> 00:03:58,930
sempre più tempo. E, come vedremo, un
programmatore che prende l'abitudine

34
00:03:58,930 --> 00:04:05,490
di testare il tempo di esecuzione dei propri
programmi in questo modo può

35
00:04:05,490 --> 00:04:13,038
facilmente e velocemente valutare quanto tempo
impiegheranno a finire. Infatti spesso

36
00:04:13,038 --> 00:04:20,010
mentre si aspetta che finisca è possibile
calcolare quanto ci metterà. Allora,

37
00:04:20,010 --> 00:04:27,000
quello ci ha messo 30 secondi per 4000 interi
e sicuramente possiamo stabilire quanto impiegherà

38
00:04:27,000 --> 00:04:33,047
per 8000 interi prima che abbia finito.
Fra poco vedremo come fare.

39
00:04:33,047 --> 00:04:40,037
Non ho intenzione di aspettare adesso.
Se volete potete pensarci su. Okay,

40
00:04:40,037 --> 00:04:45,203
quindi [tosse], questa è l'analisi empirica.
Esegui il programma con varie dimensioni di input

41
00:04:45,203 --> 00:04:51,869
e misura i tempi di esecuzione. Ora se
questo fosse qualche problema scientifico dove

42
00:04:51,869 --> 00:04:57,320
si conta qualcosa che avviene nel mondo
naturale, per esempio il numero di formiche in un

43
00:04:57,320 --> 00:05:03,255
nido di formiche o altro, allora conosceremmo solo il valore di
pochi punti grazie ai dati e vorremmo capire

44
00:05:03,255 --> 00:05:08,837
cosa accade nel mezzo disegnando un grafico
con il tempo di esecuzione, o la grandezza che ci

45
00:05:08,837 --> 00:05:15,240
interessa, sull'asse delle Y e la dimensione
del problema sull'asse delle X, ottenendo un grafico simile

46
00:05:15,240 --> 00:05:21,767
a questo. Tuttavia, poiché
molti problemi appartengono a questa classe,

47
00:05:21,767 --> 00:05:29,001
gli scienziati sono soliti fare un grafico log-log.
Facendo un grafico log-log

48
00:05:29,001 --> 00:05:36,320
spesso si ottiene una linea retta. La
pendenza della linea descrive la

49
00:05:36,320 --> 00:05:41,582
caratteristica chiave del fenomeno oggetto di studio.
Nel nostro caso, la pendenza della linea è tre ed

50
00:05:41,582 --> 00:05:49,272
è possibile fare una regressione lineare per cercare
di far passare una retta attraverso tutti i punti.

51
00:05:49,272 --> 00:05:55,078
E non è difficile mostrare con un po' di
matematica che se si ottiene una linea retta

52
00:05:55,078 --> 00:06:01,409
e la pendenza è b, allora la funzione è
proporzionale ad a*N^b.

53
00:06:01,409 --> 00:06:06,799
Questa è la cosiddetta power law o legge di potenza
e si applica a molti problemi scientifici

54
00:06:06,799 --> 00:06:13,633
compresi la maggior parte degli algoritmi.
Ecco un po' di matematica relativa al nostro esempio.

55
00:06:13,633 --> 00:06:22,794
Poiché abbiamo fatto un grafico log-log usando
le potenze di due, la linea retta è descritta dall'equazione 

56
00:06:22,794 --> 00:06:29,850
lg(T(N)) = b*lg(N) + c dove lg indica il logaritmo in
base due. Sotto vi sono i valori empirici di b e c.

57
00:06:29,850 --> 00:06:37,950
Se eleviamo a potenza di due entrambi
i lati dell'equazione otteniamo che

58
00:06:37,950 --> 00:06:44,422
T(N) equivale a una costante moltiplicata per N^b.
Perciò già solo con l'osservazione abbiamo

59
00:06:44,422 --> 00:06:50,512
ottenuto un modello abbastanza buono per
il tempo di esecuzione del nostro programma.

60
00:06:50,512 --> 00:06:59,028
Con un po' di calcoli si vede che per il nostro esempio il
tempo di esecuzione è circa 10^(-10) * N^3 secondi.

61
00:06:59,028 --> 00:07:05,053
Ora possiamo usare questa ipotesi per fare
delle previsioni. Basta inserire nella formula

62
00:07:05,053 --> 00:07:11,067
diversi valori di N. Per esempio ci vorranno
400 secondi per 16000 interi.

63
00:07:11,067 --> 00:07:16,059
400 secondi è molto tempo, tuttavia possiamo
eseguire l'esperimento

64
00:07:16,059 --> 00:07:22,611
e come ci aspettavamo siamo intorno a
quel valore, 408 secondi per la precisione.

65
00:07:22,611 --> 00:07:27,109
Ora possiamo fare una previsione per
32000 interi o per qualsiasi altro valore

66
00:07:27,109 --> 00:07:32,219
a cui potremmo essere interessati. Il modello
ci aiuta a fare previsioni evitando i

67
00:07:32,219 --> 00:07:38,927
costi necessari ad eseguire gli esperimenti.
Infatti in situazione dove c'è una legge di potenza,

68
00:07:38,927 --> 00:07:45,689
e, lo ripeto, in un gran numero di algoritmi
il tempo di esecuzione è una legge di potenza,

69
00:07:45,689 --> 00:07:51,812
quello che possiamo fare è raddoppiare la
dimensione dell'input ogni volta, come stavamo

70
00:07:51,812 --> 00:07:58,009
facendo, e poi calcolare il rapporto tra il tempo di
esecuzione per N e 2*N. Facendo ciò

71
00:07:58,009 --> 00:08:04,713
il rapporto converge ad un valore costante.
E il logaritmo in base due del rapporto

72
00:08:04,713 --> 00:08:10,258
converge a sua volta ad una costante che è
l'esponente di N nella formula per il tempo di esecuzione.

73
00:08:10,258 --> 00:08:16,342
E serve solo un po' di matematica per
verificarlo, ad ogni modo è un facile ed

74
00:08:16,342 --> 00:08:21,460
ovvio modo per prevedere i tempi di esecuzione.
Questo l'ho già detto prima:

75
00:08:21,460 --> 00:08:26,756
abbiamo questo modo veloce per stimare
il valore di b nella relazione della legge di potenza.

76
00:08:26,767 --> 00:08:33,342
Come facciamo a stimare a? Beh, possiamo
eseguire il programma e risolvere per a.

77
00:08:33,342 --> 00:08:41,138
Quindi una volta stabilito che l'esponente è tre,
eseguiamo il programma per un grande valore di N e

78
00:08:41,138 --> 00:08:48,197
otteniamo un modello molto simile a quello
ottenuto con la regressione lineare.

79
00:08:48,197 --> 00:08:56,197
È un'ipotesi quasi identica alla precedente e 
l'abbiamo ottenuta semplicemente raddoppiando N ogni volta.

80
00:08:56,522 --> 00:09:04,905
Ci sono molte cause da considerare nel cercare
di comprendere il tempo di esecuzione di un programma

81
00:09:04,905 --> 00:09:10,182
sul vostro computer [tosse]. Le cause
principali sono indipendenti dal computer che si sta

82
00:09:10,182 --> 00:09:15,004
utilizzando. Queste sono quale algoritmo state
usando e quali sono i dati in input.

83
00:09:15,004 --> 00:09:20,269
Queste determinano l'esponente nella legge
di potenza. Poi vi sono molte cause che

84
00:09:20,269 --> 00:09:25,632
dipendono dal sistema in uso. Che tipo di
hardware avete? Avete un computer veloce

85
00:09:25,632 --> 00:09:30,056
o lento? Che software usate? Cos'altro
sta accadendo sul vostro

86
00:09:30,056 --> 00:09:35,095
computer? Tutte queste cose determinano
la costante a nella legge di potenza.

87
00:09:35,095 --> 00:09:40,894
Dal momento che i sistemi di oggi sono molto complessi
sia dal punto di vista dell'hardware che del software

88
00:09:40,894 --> 00:09:46,288
a volte è difficile ottenere delle misurazioni
molto precise. Ma d'altronde non dobbiamo

89
00:09:46,288 --> 00:09:52,050
mica sacrificare animali o volare su un altro
pianeta come si fa in altre discipline scientifiche,

90
00:09:52,050 --> 00:09:57,304
nel nostro caso basta eseguire un elevato numero
di esperimenti e assicurarsi di aver compreso

91
00:09:57,304 --> 00:10:00,032
le cause viste prima.