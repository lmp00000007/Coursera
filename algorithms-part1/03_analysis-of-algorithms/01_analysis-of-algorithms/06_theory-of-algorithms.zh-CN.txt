增长阶数分类实际上是非常重要的 近年来围绕它已经有了海量的研究，我们这里简要讲一讲 实际情况要比上个例子中的要稍微复杂一些 一个问题是不同的输入会让算法的性能 发生剧烈的变化。所以我们经常需要针对不同的输入 从不同的角度来考虑分析算法。运行时间会 介于最好情况与最坏情况之间。最好情况是算法代价的 下界。运行时间总是大于等于它的 最坏情况是最困难的输入 最坏情况的分析结果为我们提供底线，算法运行时间 不会长于最坏情况。很多情况下我们 将输入认为是随机的。我们需要以某种方式对我们 正在处理的问题中的随机进行建模，而很多情况下 我们能够对其建模，即使在输入变化非常大的情况下 也有办法预测性能。比如3-SUM问题中，几乎一直都是一样的 使用近似表示时，算法中唯一的会变化的 就是计数器增加的次数，它在低阶项中 我们的分析中不需要考虑它。二叉查找中，可能有些情况下是常数时间 马上就找到了要找的关键字。我们能够证明平均和 最差情况下都是lg(N)。在另一个例子中会有更大的 浮动。对不同的输入我们有不同类型的分析 但问题是客户要解决的实际问题是什么？ 为了理解算法的性能，我们也必须理解 这一点。有两种方法成功地解决了这个问题 其中一种是设计时考虑最坏情况。只要保证 你的算法运行总是很快的，这个非常理想化 如果不能保证最坏情况，那么就考虑随机情况，依靠某种概率条件下 成立的保证。我们讲这门课中两种方法的例子都会看到 对增长阶数的考虑引出 我称作算法理论的讨论 这里我们的目标是我们有一个要解决的问题，比如要解决 3-SUM问题，我们想要知道它有多困难。我们想要找到求解它 的最好的算法。对于这个问题计算机科学家使用的方法是 在分析中试着去掉尽可能多的细节， 将分析做到只差一个常数倍数的精度。这是 增长阶数分析所达到的。我们还想完全忽略掉输入模型 所以我们重点放在针对最坏情况的设计方法。然后我们就能 只用增长阶数来讨论算法性能，而实际上也完全可能 以一种非常严密的方式来分析。利用这种分析方法我们获取了很多 关于求解问题难度的结论。我们的目标是对任意输入 找到最优的算法，使得我们能将运行时间的浮动控制在一个常数之内 因为我们找到了最坏情况并且我们也证明了 没有算法能提供更好的性能保证了。关于这点我会给出几个 简单的例子。为了描述性能的界限，有一些常用的记号 Θ、O和Ω。这里给出了这些记号 的定义。Θ记号就是表示增长阶数的方法 Θ(N^2)就是某个常数乘以N^2的简写。它的 上下界都是常数乘以N^2。这就是我们实际用来对算法分类的记号 接下来是O记号，它是算法性能的上界 比如O(N^2)就表示当N增长时，运行时间小于某个常数乘以N^2 Ω用来表示下界，Ω(N^2)表示当N增长时运行时间比 某个常数乘以N^2大。接下来我们来看是如何使用 这三个记号为算法分类的。用我们的 1-SUM、2-SUM、3-SUM可以很清楚地展示。我们的目标是确定 问题的难度并设计最优的算法 1-SUM问题是数组中是否有0？问题难度的上限 取决于某个特定的算法。比如暴力算法 查看数组中的每一项，就是一种特定的算法 需要O(N)时间表示查看每一个记录需要小于某个 常数乘以N的时间。那么最优算法的运行时间必须是 O(N)，因为特定算法为最优算法的运行时间 提供了上界。而这个例子中也很容易推出 下界，这是没有更好算法的证明。对于1-SUM问题 必须检查数组中所有的项。如果漏掉一个，那个记录 可能就是0。所以这说明最优算法的运行时间必须是 某个常数乘以N，即运行时间是Ω(N) 这个例子中，除去常数，上下界是一样的 那么这就证明了1-SUM问题的暴力算法是最优的 它的运行时间是Θ(N)，既是Ω(N)，也是O(N)。对于这个简单问题 找到最优算法很简单。对于更复杂的问题 确定上下界就更困难了，尤其 吻合的上下界非常难。比如我们看3-SUM问题 先看3-SUM问题的上界，比如我们的暴力算法，证明了 最优算法的运行时间是O(N^3)，但我们找到了更好的 改进算法，它的运行时间是O(N^2 lg N)。这是一个更好的上界 那么下界呢，同样地，我们需要检查每一项，我们可能漏掉一个记录 使得三整数组合为0，这是最优算法的 运行时间是Ω(N)的证明，但是对于3-SUM问题没有人知道一个更高的下界 上界和下界之间就存在间隔。这是个开放问题： 3-SUM算法有最优算法么？我们不知道最优算法是什么 我们甚至不知道是否存在一个运行时间小于O(N^2)的算法 我们也不知道比线性阶更高的下界。这就是算法理论中一个 开放问题的例子。我们不知道求解3-SUM问题的难度 在最近的几十年中这种方法一直非常成功 遇到一个新问题，设计出某个算法，证明它的下界 如果存在间隔，寻找新的能够降低上界的算法 或者寻找提高下界的方法。通常证明非平凡下界 是很困难的。平凡的下界，比如查看每个输入对象 并不难。非平凡下界，比如我们讲并查集问题时 提过的证明就难得多了。在最近几十年中 人们通过研究持续下降的上界来了解问题的 计算难度，得到了很多对于最坏情况更快的算法 对于很多重要的问题找到了最优算法 而很多上下界之间仍有间隔。很多人都投入到这一富有 魅力的研究领域中。在这门课当前的背景下这种分析方法 有一些附加说明。第一个是也许关注最坏情况 有些过度悲观了。我们有要解决的问题，有一些数据 也许并不是最坏情况的数据。工程与科学中的很多领域 都不关注最坏情况。对于这门课最坏的情况可能是 一道闪电劈下来，我们的课程就结束了，所以我们也没有对它做预案 对于算法这也是成立的。也许我们应该专注于理解输入的性质 并针对输入的性质寻找高效的算法 另一个要说明的是真的要预测性能和比较算法时 我们需要比常数因子级误差更准确的分析。所以我们讲了 波浪记号，以及算法理论中使用的Θ、O和Ω记号 实际上算法理论已发表的很多研究中 很多人错把O分析的结果当作了 运行时间的近似模型，其实应该是 问题更好的上界，这是个大错误 这门课中，我们使用波浪记号来表示近似模型 对于某些我们感兴趣特定的量 会给出特定的结果，运行时间中非特异的 常数和机器与系统的性质相关 使用这样的结果我们就能预测并比较 算法的性能