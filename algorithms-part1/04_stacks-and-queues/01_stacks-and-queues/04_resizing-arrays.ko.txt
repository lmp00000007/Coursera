앞에서 다룬 기본적인 배열 기반의 스택 구현은 사용자가 사전에 스택의 최대 용량(maximum capacity)을
 제공해야 하는 약점이 있었습니다. 이제 그 문제를 해결할 기법을 살펴봅시다. 용량을 명시하지 않고 API를 구현할 방법은 뭘까요? 스택 API는 스택을 만들 수 있고, 임의의 크기로 키우고 줄일 수 있어야 합니다. 어떻게 하면 배열을 키우고 줄일 수 있을까요? 쉽게 생각해 볼 수 있는 방법은 사용자가 새 아이템을 스택에 넣을 때 배열의 크기를 1만큼 키우고, 뺄 때 1만큼 줄이는 겁니다. 코드 짜기 쉽겠죠. 하지만 그걸 하는데 드는 비용을 고려하면 가치가 있진 않습니다. 그 연산을 하기 위해서는
 크기가 1 커진 새로운 배열을 만들고 새 배열에 기존 배열의 아이템들을
 복사해야 하기 때문입니다. 따라서 처음 N 개의 아이템을 삽입하는
 시간은 N(N-1)에 비례합니다. 왜냐면 꽉찬 스택의 용량이 N-1일 때 새 아이템을
 삽입하는 시간은 N에 비례하기 때문입니다. 즉, 처음 N 개의 아이템의 삽입은
 1부터 N까지의 정수의 합이므로 N(N-1)/2에서 대략 (N^2)/2가 됩니다. 스택에 N 개의 아이템을 삽입하는 데 이차식의 수행 시간(quadratic time)이 걸린다는 건, 지금까지 몇 번에 걸쳐서 보아왔듯이, 큰 문제에서는 이와 같은 성능을 받아들일 수 없습니다. 따라서 우리가 풀 과제는 '리사이징을 해야 하긴 하는데, 어느 정도 덜 빈번하게 했으면 좋겠다'는 겁니다. 따라서 이를 하기 위한 잘 알려진 방법은 반복 배증(repeated doubling)이라 하는데요. 배열이 꽉 차면 새 배열의 크기를 2'배'로 '증'가시키고
 기존 아이템을 복사하는 겁니다. 이러면 새 배열을 그리 자주 생성하진 않겠죠. 여기 구현이 있습니다. 시작할 때는 배열의 크기를 1로 하고요. 스택이 꽉 차면 - 이건 N을 검사해보면 알겠죠. N이 스택 내에 아이템의 숫자이니,
 이 값과 배열의 길이를 비교하는 겁니다. - 이제 배열의 크기를 1에서 2로 2배
 늘리고 아이템을 삽입합니다. 배열의 크기를 새로운 용량으로
 바꾸는 건 어떻게 할까요? 그 용량에 맞는 새 배열을 생성하고,
 그대로 현 스택의 배열의 모든 아이템을 복사해온 뒤, 스택 클래스가
 가진 배열 참조 s를 업데이트 합니다. 이렇게 되면 스택의 인스턴스 변수 s가 새로운 더 큰 배열을 가리키게 됩니다. 지금까지 살펴본 내용을 바탕으로 결론을 내보죠. 배열 표현을 활용한 스택에 N 개의 아이템을 배열에 삽입하면, 이제 그 실행 시간은 N^2이 아니라 N에 비례하게 됩니다. 그 이유는 새 배열의 용량을 2배씩 늘리게 되는데, 용량이 2배 늘어날 때마다, 스택에 더 많은 아이템을 (배열 리사이징 없이) 삽입 가능합니다. 따라서 평균적으로, 각 연산의 비용에 1이 더해지게 되므로 N 개의 아이템을 삽입하는 비용을 계산하면 1부터 N까지의 정수의 합 대신에 배열 접근 비용인 N에다가, '2의 지수승 2^i를 i=1부터 2^i가 N을 초과하기 직전까지의 합'을 더한 값이 되는데 그때 가능한 최대 i는 log_2 N이고, 등비수열의 합 공식에 따라
 2(2^(log_2 N) - 1)/(2-1) = 2N-2이니 총 비용은 대략 3N이 됩니다. 정리하면, 아이템을 한 번 넣을 때마다 copy로 인해 배열 접근이 한 번 있고,
 반복 배증으로 인해 평균적으로 2 번 배열을 접근하므로 N개의 아이템의 삽입을 위해서
 각 아이템 삽입 때마다 대략 3번의 배열 접근이 발생합니다. 아래 그림은 지금까지의 논의를 다르게 보여주는데요. push 연산을 구현했을 때 배열 접근의 수를 나타낸 겁니다. 배열이 꽉 찰 때, 즉 2^n번째 원소를 삽입할 때,
 그만큼 많은 배열 접근을 필요로 하지만, 어떤 측면에서 즉, 스택에 아이템을 넣는 전체 과정에서
 사실은 이미 비용을 지불했다고 볼 수 있습니다. 이를 분할상환분석(amortized analysis)이라 합니다. 여기서는 '모든 연산에 대한 비용'의 평균을 냅니다. 방금 본 것은 스택 구현의 효율성을 알기 위한 분할상환분석의 좋은, 유용한 에시입니다. 이제 pop 연산은 어떨까요?
 이 때는 배열을 줄이는 걸 고민해야 합니다. 쉽게 생각했겠지만 꽉 찼을 때 배증했으므로 pop으로 인해 아이템의 수가 용량의 절반이 되었을 때
 용량을 절반으로 줄이면 어떨까요? 배열이 너무 비는 걸 원하진 않으니까요. 이 방법은 스래싱(thrashing)이라 불리는 현상으로
 인해 제대로 동작하지 않습니다. 사용자가 배열이 꽉 찼을 때 push-pop-push-pop을
 교대로 반복했다고 합시다. 그러면 2배, 1/2배, 2배, 1/2배, 2배, 1/2배를 반복하며 매 연산마다 새로운 배열을 만드려고 하겠죠. 각 연산은 N에 비례하는 시간이 걸리므로 전체 시간은 이차식의 실행 시간을 가집니다. 이런 결과는 원하지 않습니다. 효율적인 해법은 배열이 용량의 1/4배만큼만 찼을 경우에 pop이 실행되면
 용량을 줄이는 것입니다. 매우 구현하기 쉽죠. 배열이 용량의 1/4배만큼 찼다면, 배열의 용량을 절반으로 줄입니다. 절반으로 줄어든 그 시점에서 여러 아이템을 추가해서 늘리거나 제거해서 줄일 수 있습니다. 하지만 배열 리사이징 연산은 새로운 용량을 기준으로 완전히 꽉 차거나
 다시 1/4배가 되지 않는 한 실행되지 않습니다. 따라서 이 상황에서의 불변성(invariant)은 첫째로 배열이 언제나 용량의 25%와 100% 사이 만큼 차있다는 점입니다. 다음으로 리사이징을 할 때마다, 이미 삽입, 삭제에서 그 비용을 이미 지불한 걸로 볼 수 있다는 겁니다. 여기 작은 클라이언트 프로그램 예시에서 배열에 어떤 일이 일어나는지 봅시다. 시작할 때 배열이 1, 2, 4로 배증하는 걸 볼 수 있을텐데, 4가 된 뒤에 8이 되고, 그 뒤에는 연산이 몇 번 있음에도 그 크기를 유지함을 알 수 있습니다. 그리고선 겨우 2 개 아이템이 남을 때까지 줄어들지 않고 있다가 2개 아이템이 남아서야 줄어듭니다. 배열 리사이징은 그리 자주 발생하진 않지만, 배열을 이용해 스택 API를 구현하는
 매우 효율적인 방법입니다. 사용자가 스택의 최대 용량을 알려주지 않아도 되니까요. 그럼에도 아직도, 매 순간 우리가 사용하고 있는 메모리의 양은 스택에 있는 아이템의 수의 상수배에 불과함합니다. 이제 여기 나온 분석은 pop과 push의 연산이 어떤 순서로 주어지든 연산 당 평균 실행 시간이 상수에 비례하게 됨을 알려줍니다. 이 때 최악의 경우는, 스택이 증배할 때이며 이 때는 N에 비례하는 시간이 걸립니다. 이러한 성능은 우리가 바라지 않는 성능이죠. 하지만 우리가 얻은 장점은 매우 빠른 push 및 pop 연산이죠. 그저 배열에 접근해 증가시키기만 할 뿐이니,
 대부분의 연산에서는 매우 효율적입니다. 또한 많은, 많은 사용자에게 해볼 만한,
 효과적인 트레이드오프(trade-off)입니다. 그럼 메모리 사용량은 어떨까요? 여기 스택에 대한 메모리 사용량 분석이 있습니다. 문자열이 사용하는 메모리 공간보단 확실히 작습니다. 8N에서 32N 사이의 양을 사용하는데 배열이 얼마나 찼느냐에 따라 달라집니다. Java에서 배열이 사용하는
 공간 크기를 간단히 분석해봅시다. 반복하지만, 이 분석은 스택 그 자체에 대한 것으로, 클라이언트 프로그램이 소유한
 문자열에 대한 분석은 하지 않았습니다. 그럼 리사이징을 지원하는 배열 기반 구현과
 연결 리스트 기반 구현 간의 트레이드오프는 뭘까요? 같은 API에 대해 다른 구현이고 사용자는 둘을 교환하여 사용할 수 있습니다. 어떤 게 낫죠? 많은 상황에서, 여러 API 구현을 다루게 되겠고 클라이언트 프로그램의 성질에 의존적입니다만 어느 것이 좋은 것인지 골라야만 할 겁니다. 연결 리스트는 최악의 경우에 상수 시간이 걸립니다. 이는 성능이 (예측이 된다는 점에서) 보장된다는 의미입니다. 다만 연결을 처리하기 위한 시간과 공간이 좀 더 필요합니다. 더 느려질 수 있죠. 리사이징이 되는 배열 구현의 경우, 좋은 분할상환 시간을 가지므로
 전체 과정에서의 평균적인 연산 성능이 좋습니다. 공간 낭비를 덜 하며, 각 연산은 아마 더 빠르게 동작할 겁니다. 몇몇 사용자에게는 이것이 차이를 만듭니다. 아마 비행기가 착륙하려는 시점에 동작할 프로그램에 리사이징을 하는 배열 구현을 사용하진 않을 겁니다. 갑자기 일부 연산만 빠르게 동작하지
 않길 바라진 않을테니까요. 비슷한 예로, 아마 패킷(packet)이
 빠른 속도(rate)로 들어오는 인터넷 스위치에서 갑작스럽게 모든 것이 느려져서 데이터 일부를 손실해서는
 안 되는 상황을 생각할 수 있습니다. 따라서 무슨 구현이 나을지는,
 사용할 사용자에게 주어진 트레이드오프입니다. 성능 보장을 해야 한다면, 즉 모든 연산이 빠르게 동작해야 하면 저라면 연결 리스트 기반 스택 구현을 쓰겠습니다. 보장이 필요 없고 다만 전체 시간만 신경이 쓰이는 상황이면 저라면 리사이징이 되는 배열 기반의 스택 구현을
 쓰겠습니다. 개별 연산이 빨라서 전체 시간이 훨씬 줄어들테니까요. 이런 간단한 자료구조에서조차, 많은 실제 상황에서 차이를 만드는 정말 중요한 트레이드오프들을 볼 수 있습니다.