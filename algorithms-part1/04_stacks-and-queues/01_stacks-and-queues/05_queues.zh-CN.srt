1
00:00:01,086 --> 00:00:07,708
好，接下来我们简要考虑一下使用相同基本底层数据结构的

2
00:00:07,708 --> 00:00:13,663
队列的实现。那么，这是字符串队列对应的API

3
00:00:13,890 --> 00:00:19,964
实际上和栈的API是相同的，只是名字不一样

4
00:00:20,162 --> 00:00:25,926
入栈换成了入队（enqueue），出栈换成了出队（dequeue）。语义

5
00:00:25,926 --> 00:00:32,201
是不同的。入队操作向队尾添加元素，而出队操作从

6
00:00:32,390 --> 00:00:38,301
队首移除元素。就像你排队买票一样

7
00:00:38,512 --> 00:00:44,758
入队时你排在队列的最后，在队列里待的最久的人是下一个

8
00:00:44,758 --> 00:00:50,892
离开队列的人。那么我们先看看怎么用链表实现队列的操作

9
00:00:50,892 --> 00:00:56,168
然后再用数组实现。现在，队列的链表表示中

10
00:00:56,168 --> 00:01:02,441
我们需要维护两个指针引用。一个是链表中的第一个

11
00:01:02,441 --> 00:01:08,328
元素，另一个是链表最后一个元素。插入的时候我们在

12
00:01:08,328 --> 00:01:13,761
链表末端添加元素，而不是在链表头。移除元素的时候

13
00:01:13,761 --> 00:01:19,704
不变，依然从链表头取出元素。那么这就是出队操作的实现

14
00:01:19,704 --> 00:01:27,231
和栈的出栈操作的代码是一样的。保存元素，前进指针

15
00:01:27,231 --> 00:01:35,403
指向下一个节点，这样就删除了第一个节点，然后返回该元素。一模一样

16
00:01:35,403 --> 00:01:43,298
添加节点，或者入队操作时，向链表添加新节点。我们要把它放在链表末端

17
00:01:43,298 --> 00:01:50,921
这样它就是最后一个出队的元素。首先

18
00:01:50,921 --> 00:01:58,085
要做的是保存指向最后一个节点的指针，因为我们需要

19
00:01:58,085 --> 00:02:06,459
将它指向下一个节点的指针从null变为新的节点。然后给

20
00:02:06,459 --> 00:02:14,577
链表末端创建新的节点并对其属性赋值，将旧的指针

21
00:02:14,577 --> 00:02:22,331
从null变为指向新节点。依然只需要几行代码

22
00:02:22,331 --> 00:02:31,418
这是基本的链表操作。实际上多年前我们教算法与

23
00:02:31,418 --> 00:02:37,517
数据结构课程的时候课程中大部分都是这样的

24
00:02:37,517 --> 00:02:44,035
指针操作，但现在仅限于如栈和队列这样的少数

25
00:02:44,035 --> 00:02:50,580
几个实现以及一些其他的基本数据结构。所以我们再也

26
00:02:50,580 --> 00:02:56,139
不需要那么多操作链表的通用程序。我们把它们封装在

27
00:02:56,139 --> 00:03:02,754
这样的基本数据类型里了。好，回到我们完整的实现

28
00:03:02,754 --> 00:03:09,029
这里不仅集合了前几页的代码

29
00:03:09,029 --> 00:03:16,030
还处理了当队列为空时的特殊情况

30
00:03:16,030 --> 00:03:22,669
为了保证去除最后一个元素队列是空的，我们将last设为null

31
00:03:22,669 --> 00:03:29,535
还保证first和last始终都是符合我们预想的

32
00:03:29,797 --> 00:03:36,069
这些细节比较简单。好，那么用数组实现呢？我们

33
00:03:36,069 --> 00:03:41,096
就不详细讲了，用可调大小的数组实现并不难

34
00:03:41,096 --> 00:03:47,030
但绝对是一个棘手的编程练习

35
00:03:47,030 --> 00:03:52,761
值得一试。我们维护两个指针，分别指向队列中的

36
00:03:52,761 --> 00:03:58,411
第一个元素和队尾，即下一个元素要加入的地方

37
00:03:58,576 --> 00:04:03,087
那么对于入队操作在tail指向的地方加入新元素，出队操作移除

38
00:04:03,087 --> 00:04:10,554
head指向的元素。棘手的地方是一旦指针的位置超过了数组

39
00:04:10,554 --> 00:04:18,058
的容量，必须重置指针回到0，这里需要多写一些代码

40
00:04:18,058 --> 00:04:25,077
而且和栈一样实现数据结构的时候你需要加上调整容量的方法

41
00:04:25,077 --> 00:04:28,013
这个留下作为课后练习