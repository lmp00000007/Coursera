前面了一些基本数据结构和实现，看起来 相当基础和简单，但马上我们就要涉及这些基本概念 的一些非常复杂的应用，下面我们来讲这个 首先要提到的是我们实现的数据类型和数据结构 往往能在Java库中找到，很多编程环境都是如此 比如在Java库中就能找到栈和队列这样的字眼 Java集合库中所谓的List接口如这里所示 Java对于元素序列有一个通用API 包含从表尾添加，从表头移除之类的方法 而且它的实现使用的是可变大小数组。我们考虑的很多原则 LinkedList接口一样考虑了。
所以，为什么不直接用那些接口呢？为什么要用我们自己的 实现呢？问题在于这样的库一般是 开发组（committee phenomenon）设计的
加入了越来越多的操作 API变得过宽和臃肿。在API中拥有非常多的操作并不好 我们马上就会见到一个例子 真正的问题在于你关于库代码的性能知之甚少 或者不能对其性能很好地估计。你可能 很快就遇到性能瓶颈，即使是很简单的客户端 我们推荐因为我们只需要使用这么几个基本数据结构 这些数据结构都很简单，应该直接用我们前面针对这些基础 数据结构讲过的实现。等成为有经验的程序员以后 知道自己在做什么了，可以高效地使用一些集合库 但是经验不足的程序员使用库经常会遇到问题 这是不久前学生编程作业中的“血的教训” 我们有个作业需要你在渗滤系统中生成随机开域 有个学生认真听讲 使用数组实现，可以随机选取数组中的索引 检查是否为开域，如此反复。数组是N×N的 包含N^2个元素，需要大约N^2时间，对于这个应用实际上是 线性时间。而另一个学生之前学过一些Java 觉得自己是个专家，擅自决定用LinkedList 因为觉得自己会用Java库，不想费工夫下载我们的代码 就用了Java库，然后随机选取索引并删除 这个程序需要平方时间。当倒霉的Kenny试着在我们要求的 巨大实例上运行他的程序的时候，他发现程序一直跑不停 原因在于Java中LinkedList实现访问给定索引的元素需要 线性时间，而不是数组中的常数时间。对于Kenny 这难以置信，他很难从实现中得出 程序太慢的信息。用这样包含了那么多操作的 像瑞士军刀一样的实现，很难知道你的客户端需要的 那组操作是否是高效实现的 我们这门课坚持的原则是我们在课上实现之前学生们 不应该使用库，至少得能表明你理解性能指标 下面，我们看一些栈的应用 栈确实非常基础，很多计算基于它运行 因为它能实现递归，所以你每天都经常使用栈 当你使用网页浏览器上的后退按钮是，你去过的网页 存储在栈上。马上还有两个例子，第一个 是要处理编译一种编程语言或者解释为实际的计算 另一个是广泛用于印刷和出版的 PostScript语言。编译器实现函数的方式 是使用栈。当有函数被调用时，整个局部环境和 返回地址入栈，之后函数返回时 返回地址和环境变量出栈 有个栈包含全部的信息，无论函数调用的是否是它本身 这都无关。栈就包含了递归。实际上，你总能 显式地使用栈将递归程序非递归化。这是一个叫做gcd函数 计算最大公约数，p与q的最大公约数 就是q与p mod q的最大公约数 这个函数反复调用自己直到q变成0。如图所示 信息被保存在栈上。下面这个例子充分展示了栈的作用 同时演示了相同的代码能够处理 多种类型数据，例子是Dijkstra 双栈算术表达式求值算法。目标是 给定算术表达式，这个就像简单的程序中的中缀表达式 这个一会再说，就叫算术表达式吧 有操作数和操作符，你想要对这个表达式求值 Dijkstra的算法说出来很简单。从左至右处理表达式 维护两个栈 如果见到数值，放在数值栈上，如果见到 操作符，放到操作符栈上。遇到左括号略过 遇到右括号，出栈操作符和两个数值，将运算结果入栈 说了一堆我们来看演示。一开始数值栈和操作符栈都是空的 然后我们准备从左到右处理。上面是 归纳的我们会遇到的四类情况以及相应的处理 忽略左括号，一个数值，放在数值栈上 所以 1 直接放在数值栈上。操作符，我们放在操作符栈上 所以加号放在操作符栈上。忽略左括号。忽略括号有点奇怪 这个问题后面再讲。数值，放在数值栈上 操作符，放在操作符栈上。除了往栈里放东西看起来 我们没有做太多的事。现在，遇到右括号了 开始变得有意思了。获取操作符栈顶的操作符和 数值栈上的前两个数值，然后如此操作 在两个树枝上进行操作符的运算，将结果放回到数值栈上 所以我们取出上面两个数值，进行操作，然后将 得到的结果放回到数值栈。这就是右括号对应的操作 继续往下走，入栈一个乘号。左括号，忽略。4，入栈。乘号 5 放到数值栈。现在我们在栈上有好多东西 然后遇到右括号，就要完成计算了 从数值栈上取下前两个数值，取下操作符栈顶的操作符 进行操作，计算结果放回数值栈。又一个右括号 取下两个数值，进行操作，计算结果放回数值栈 终于，最后一个右括号，从数值栈上取下 前两个数值，取下操作符栈顶的操作符 进行操作，计算结果放回数值栈 计算结束，这就是结果。算术表达式的值是101 这里是实现Dijkstra双栈算法的代码 有两个栈。操作符栈是字符串栈 也可以是字符，因为只存操作符。数值栈是Double栈 相同的栈代码，但是泛化的。我们使用两种不同的 数据类型。然后就是进行Dijkstra算法。读取新的字符串 如果遇到左括号，不做操作 如果是加号或者乘号，入栈。如果遇到右括号，就将操作符 出栈。如果是加号，将这两个数值的运算结果放在数值栈顶 如果是乘号，将栈顶两个数值相乘 然后将结果入栈。运算结束后就是将栈顶的数值 打印出来。这是利用栈处理任何算术表达式的一个优雅的实现 也很容易扩展它，处理其他的符号 为什么这个算法是正确的呢？当算法遇到操作符时 比如在里面，有左括号、操作数、操作符、操作数、右括号 很容易看出在里面应该做什么 将2和3放在数值栈顶 加号放在操作符栈顶，当遇到右括号时 进行运算，算法继续执行，就像原先的输入是这样的 数值替换了括号中的表达式。从里到外 对每个括号中包含的运算操作，像这样 就是重写这个式子，好像原先的表达式是1+(5×20) 然后替换为1+100，101。这就是 为什么Dijkstra算法是正确的。实际上这挺好理解的 你可以继续扩展这个算法，加入函数比如log和sin 其他的操作符，给操作符分配优先级，让它们可结合 等等多种操作。实际上这就引向了 开发编译器或者将一个程序从一种编程语言 翻译为计算的过程，所以使用栈的Dijkstra算法 是通向理解计算基础的大门