1
00:00:01,082 --> 00:00:06,475
接下来我们要处理的是前面实现里另一个
根本性的缺陷

2
00:00:06,475 --> 00:00:11,664
那些实现只适用于字符串

3
00:00:11,664 --> 00:00:16,503
想要实现其他类型数据的队列和栈怎么办呢？

4
00:00:16,503 --> 00:00:22,573
这个问题就涉及泛型的话题了。好，我们已经实现了

5
00:00:22,573 --> 00:00:29,075
字符串的栈 但是应用中我们可能想要实现的有不同的类型的

6
00:00:29,075 --> 00:00:35,675
栈，如整型的栈、URL（如网址）的栈、车（Van）的栈或者

7
00:00:35,887 --> 00:00:41,386
可能要处理的任何类型。那么该如何实现那些类型数据类型的

8
00:00:41,386 --> 00:00:46,796
栈和队列呢？我们可能考虑的第一点

9
00:00:46,796 --> 00:00:51,869
实际上很多编程环境中这一点都是不得不考虑的

10
00:00:51,869 --> 00:00:57,135
就是对我们使用的每一个数据类型实现一个单独的栈类

11
00:00:57,135 --> 00:01:02,900
这个办法无法令人满意，我们小心翼翼编写的实现了可调

12
00:01:02,900 --> 00:01:09,348
大小数组的代码。接下来要把代码复制到需要实现栈的地方

13
00:01:09,348 --> 00:01:15,129
把数据类型改成Van或者整型。那么如果我们要处理上百个

14
00:01:15,129 --> 00:01:21,039
不同的数据类型，我们就得有上百个不同的

15
00:01:21,039 --> 00:01:26,470
实现。不幸的是在刚开始的时候Java就是陷在这种模式里

16
00:01:26,470 --> 00:01:31,424
非常多的编程语言都无法摆脱这样的模式

17
00:01:31,424 --> 00:01:36,425
所以我们要看的是一种现代模式，不用给每个类型的数据

18
00:01:36,425 --> 00:01:42,509
分别实现。有一个广泛采用的捷径是

19
00:01:42,509 --> 00:01:51,399
使用强制类型转换对不同的数据类型重用代码

20
00:01:51,704 --> 00:01:59,435
我们对Object类实现数据结构，Java中所有的类都是Object的

21
00:01:59,435 --> 00:02:07,050
子类，当客户端使用时，就将结果转换为

22
00:02:07,050 --> 00:02:13,491
对应的类型。这个我不想花很多时间来讲

23
00:02:13,491 --> 00:02:19,643
因为我认为这样的解决方案不能令人满意 这个例子中我们有两个栈

24
00:02:19,643 --> 00:02:25,878
苹果的栈和桔子的栈。接下来，当从苹果栈出栈的时候

25
00:02:25,878 --> 00:02:32,007
需要客户端将出栈元素强制转换为苹果

26
00:02:32,007 --> 00:02:37,103
这样类型检查系统才不会报错。这样做的问题在于必须客户端

27
00:02:37,270 --> 00:02:43,100
完成强制类型转换，而且如果没有完成这是会一个隐患

28
00:02:43,100 --> 00:02:51,458
我们要讲的第三种方法是用的是泛型

29
00:02:51,458 --> 00:03:00,357
这种方法中客户端程序不需要强制类型转换。在编译时就能

30
00:03:00,652 --> 00:03:08,018
发现类型不匹配的错误，而不是在运行时。这个使用泛型的

31
00:03:08,018 --> 00:03:16,698
例子中栈的类型有一个类型参数，在代码里这个尖括号中

32
00:03:17,011 --> 00:03:24,080
如果我们有一个苹果栈

33
00:03:24,378 --> 00:03:32,980
并且试图入栈一个桔子，我们在编译时就会遇到

34
00:03:32,980 --> 00:03:38,027
错误，因为声明中那个栈只包含苹果

35
00:03:38,027 --> 00:03:44,492
优秀的模块化编程的指导原则就是我们应当

36
00:03:44,492 --> 00:03:51,730
欢迎编译时错误，避免运行时错误。因为如果我们能在编译时

37
00:03:51,730 --> 00:03:58,323
检测到错误，我们给客户交付产品或者部署对一个API的实现时

38
00:03:58,323 --> 00:04:04,310
有把握对于任何客户都是没问题的，然而

39
00:04:04,310 --> 00:04:09,664
直到运行时才会出现的错误可能在某些客户的开发中出现

40
00:04:09,853 --> 00:04:16,082
几年之后，就必须部署我们的软件，这对每个人

41
00:04:16,347 --> 00:04:23,849
都是很困难的。好，实际上优秀的

42
00:04:23,849 --> 00:04:32,268
泛型实现并不难。只需要把每处

43
00:04:32,268 --> 00:04:40,637
使用的字符串替换为泛型类型名称，如这里的代码所示

44
00:04:40,637 --> 00:04:48,018
左边是我们使用链表实现的字符串栈，右边是

45
00:04:48,018 --> 00:04:53,095
泛型实现。左边每处用到字符串类型的地方

46
00:04:53,095 --> 00:04:59,520
我们换成了item。在最上面类声明的地方

47
00:04:59,520 --> 00:05:05,539
我们用尖括号声明item是我们要用的泛型类型

48
00:05:05,746 --> 00:05:11,836
这样的实现非常直截了当，并且出色地

49
00:05:11,836 --> 00:05:18,862
解决了不同的数据类型单独实现的问题

50
00:05:19,298 --> 00:05:29,269
基于数组的实现，这种方法不管用。目前很多编程语言

51
00:05:29,269 --> 00:05:35,404
这方面都有问题，而对Java尤其是个难题

52
00:05:35,404 --> 00:05:41,231
我们想做的是用泛型名称item直接声明一个新的数组

53
00:05:41,443 --> 00:05:48,057
如高亮的这行所示。其他部分都和之前的方法没区别

54
00:05:48,057 --> 00:05:55,059
不幸的是，Java不允许创建泛型数组。对于这个问题有各种

55
00:05:55,059 --> 00:06:02,125
技术方面的原因，在网上关于这个问题你能看到大量的争论

56
00:06:02,125 --> 00:06:08,718
这个不在我们讨论的范围之内。这里，要行得通我们需要

57
00:06:08,718 --> 00:06:15,322
加入强制类型转换。我们创建Object数组，然后将类型转换为

58
00:06:15,322 --> 00:06:22,461
item数组。我的观点是优秀的代码应该不用强制类型转换。要

59
00:06:22,461 --> 00:06:28,622
尽量避免强制类型转换因为它确实在我们的实现中

60
00:06:28,622 --> 00:06:35,306
留下隐患。但这个情况中我们必须加入这个强制类型转换

61
00:06:35,306 --> 00:06:41,647
我们听到过的教导是蹩脚的强制类型转换让你看你的代码不爽

62
00:06:41,647 --> 00:06:47,734
这样的想法不仅仅你一个人有

63
00:06:47,734 --> 00:06:52,789
我认为像这么简单的代码强制类型转换是讨厌的特性

64
00:06:52,789 --> 00:06:58,276
但幸运的是，这门课中差不多除了这里其他的地方

65
00:06:58,276 --> 00:07:04,297
都不需要这样蹩脚的强制类型转换。当我们编译这个程序的

66
00:07:04,297 --> 00:07:10,490
时候，Java会发出警告信息说我们在使用未经检查

67
00:07:10,490 --> 00:07:15,610
或者不安全的操作，详细信息需要使用-Xlint=unchecked参数

68
00:07:15,610 --> 00:07:21,787
重新编译。我们加上这个参数重新编译之后显示

69
00:07:21,787 --> 00:07:27,247
你在代码中加入了一个未经检查的强制类型转换，对此发出

70
00:07:27,247 --> 00:07:33,428
警告，你不应该加入未经检查的强制类型转换。好吧，当你

71
00:07:33,428 --> 00:07:40,014
编译这样的代码的时候看到这个警告信息没事。我认为他们

72
00:07:40,014 --> 00:07:45,494
应该在警告信息中加上“我们很抱歉让你这么做”

73
00:07:45,494 --> 00:07:51,770
必须这么做并不是我们的错，因为你不允许我们声明泛型数组

74
00:07:51,770 --> 00:07:57,908
我们才不得不这么做。如果你采用了我们的方法

75
00:07:57,908 --> 00:08:03,915
收到这个警告信息请不要认为是你的代码中

76
00:08:03,915 --> 00:08:10,596
有什么问题。接下来，是个跟Java有关的

77
00:08:10,596 --> 00:08:19,274
细节问题，关于基本类型。我们用的泛型类型是针对

78
00:08:19,274 --> 00:08:26,636
Object及其子类的。前面讲过，是从Object数组强制类型转换

79
00:08:26,876 --> 00:08:34,517
来的。为了处理基本类型，我们需要使用Java的包装对象类型

80
00:08:34,782 --> 00:08:40,751
如大写的Integer是整型的包装类型等等，你们很多人可能

81
00:08:40,751 --> 00:08:46,419
很熟悉。另外，有个过程叫自动打包

82
00:08:46,419 --> 00:08:51,827
自动转换基本类型与包装类型，所以处理基本类型这个问题

83
00:08:51,827 --> 00:08:57,633
基本上都是在后台完成的

84
00:08:57,633 --> 00:09:04,693
综上所述，我们能定义适用于任何数据类型的泛型栈的API

85
00:09:04,693 --> 00:09:10,665
而且我们有基于链表和数组两种实现

86
00:09:10,665 --> 00:09:20,867
我们讲过的使用可变大小数组或者链表，对于任何数据类型都

87
00:09:20,867 --> 00:09:26,035
有非常好的性能