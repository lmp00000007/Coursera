接下来我们要处理的是前面实现里另一个
根本性的缺陷 那些实现只适用于字符串 想要实现其他类型数据的队列和栈怎么办呢？ 这个问题就涉及泛型的话题了。好，我们已经实现了 字符串的栈 但是应用中我们可能想要实现的有不同的类型的 栈，如整型的栈、URL（如网址）的栈、车（Van）的栈或者 可能要处理的任何类型。那么该如何实现那些类型数据类型的 栈和队列呢？我们可能考虑的第一点 实际上很多编程环境中这一点都是不得不考虑的 就是对我们使用的每一个数据类型实现一个单独的栈类 这个办法无法令人满意，我们小心翼翼编写的实现了可调 大小数组的代码。接下来要把代码复制到需要实现栈的地方 把数据类型改成Van或者整型。那么如果我们要处理上百个 不同的数据类型，我们就得有上百个不同的 实现。不幸的是在刚开始的时候Java就是陷在这种模式里 非常多的编程语言都无法摆脱这样的模式 所以我们要看的是一种现代模式，不用给每个类型的数据 分别实现。有一个广泛采用的捷径是 使用强制类型转换对不同的数据类型重用代码 我们对Object类实现数据结构，Java中所有的类都是Object的 子类，当客户端使用时，就将结果转换为 对应的类型。这个我不想花很多时间来讲 因为我认为这样的解决方案不能令人满意 这个例子中我们有两个栈 苹果的栈和桔子的栈。接下来，当从苹果栈出栈的时候 需要客户端将出栈元素强制转换为苹果 这样类型检查系统才不会报错。这样做的问题在于必须客户端 完成强制类型转换，而且如果没有完成这是会一个隐患 我们要讲的第三种方法是用的是泛型 这种方法中客户端程序不需要强制类型转换。在编译时就能 发现类型不匹配的错误，而不是在运行时。这个使用泛型的 例子中栈的类型有一个类型参数，在代码里这个尖括号中 如果我们有一个苹果栈 并且试图入栈一个桔子，我们在编译时就会遇到 错误，因为声明中那个栈只包含苹果 优秀的模块化编程的指导原则就是我们应当 欢迎编译时错误，避免运行时错误。因为如果我们能在编译时 检测到错误，我们给客户交付产品或者部署对一个API的实现时 有把握对于任何客户都是没问题的，然而 直到运行时才会出现的错误可能在某些客户的开发中出现 几年之后，就必须部署我们的软件，这对每个人 都是很困难的。好，实际上优秀的 泛型实现并不难。只需要把每处 使用的字符串替换为泛型类型名称，如这里的代码所示 左边是我们使用链表实现的字符串栈，右边是 泛型实现。左边每处用到字符串类型的地方 我们换成了item。在最上面类声明的地方 我们用尖括号声明item是我们要用的泛型类型 这样的实现非常直截了当，并且出色地 解决了不同的数据类型单独实现的问题 基于数组的实现，这种方法不管用。目前很多编程语言 这方面都有问题，而对Java尤其是个难题 我们想做的是用泛型名称item直接声明一个新的数组 如高亮的这行所示。其他部分都和之前的方法没区别 不幸的是，Java不允许创建泛型数组。对于这个问题有各种 技术方面的原因，在网上关于这个问题你能看到大量的争论 这个不在我们讨论的范围之内。这里，要行得通我们需要 加入强制类型转换。我们创建Object数组，然后将类型转换为 item数组。我的观点是优秀的代码应该不用强制类型转换。要 尽量避免强制类型转换因为它确实在我们的实现中 留下隐患。但这个情况中我们必须加入这个强制类型转换 我们听到过的教导是蹩脚的强制类型转换让你看你的代码不爽 这样的想法不仅仅你一个人有 我认为像这么简单的代码强制类型转换是讨厌的特性 但幸运的是，这门课中差不多除了这里其他的地方 都不需要这样蹩脚的强制类型转换。当我们编译这个程序的 时候，Java会发出警告信息说我们在使用未经检查 或者不安全的操作，详细信息需要使用-Xlint=unchecked参数 重新编译。我们加上这个参数重新编译之后显示 你在代码中加入了一个未经检查的强制类型转换，对此发出 警告，你不应该加入未经检查的强制类型转换。好吧，当你 编译这样的代码的时候看到这个警告信息没事。我认为他们 应该在警告信息中加上“我们很抱歉让你这么做” 必须这么做并不是我们的错，因为你不允许我们声明泛型数组 我们才不得不这么做。如果你采用了我们的方法 收到这个警告信息请不要认为是你的代码中 有什么问题。接下来，是个跟Java有关的 细节问题，关于基本类型。我们用的泛型类型是针对 Object及其子类的。前面讲过，是从Object数组强制类型转换 来的。为了处理基本类型，我们需要使用Java的包装对象类型 如大写的Integer是整型的包装类型等等，你们很多人可能 很熟悉。另外，有个过程叫自动打包 自动转换基本类型与包装类型，所以处理基本类型这个问题 基本上都是在后台完成的 综上所述，我们能定义适用于任何数据类型的泛型栈的API 而且我们有基于链表和数组两种实现 我们讲过的使用可变大小数组或者链表，对于任何数据类型都 有非常好的性能