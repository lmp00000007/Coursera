다시 온 걸 환영합니다. 오늘은 백(bag)과 큐(queue) 그리고 스택(stack)이라 불리는
 기본 데이터 타입(fundamental data types)을 구현하기 위한 자료구조와 알고리즘에 대해 이야기 할 것입니다. 여러분은 이 내용이 좀 익숙할지도 모르겠는데요. 하지만 오늘은 더욱 꼼꼼하게 살펴봅시다. 기본 데이터 타입은 많은 응용에서 사용되는데,
 관리하고자 하는 객체의 집합(collection)을 그 값으로 합니다. 기본 데이터 타입에 대한 연산들은 매우 단순합니다. 집합에 아이템을 추가(add=insert)하거나, 삭제(remove)하거나, 집합의 각 객체를 순회(iterate)하면서 어떤 연산을 수행한다든가, 또한 비어있는지를 검사하는 연산도 있습니다. 이 대부분은 그 의도가 명확합니다. 요점은, (슬라이드엔 삽입에 관해 논하지만; 객체에 대응하는) 아이템을
 삭제하려할 때, 어떤 아이템을 삭제해야하는가입니다. 이 문제에 대한 기본적인 고전 자료구조
 두 가지는 스택과 큐입니다. 이 두 가지는 삭제될 (또는 삽입될) 아이템을 선택하는 방법이 다릅니다. 스택은 가장 최근에 삽입된 아이템을 제거합니다. 스택이라는 용어는 (스프링 동전케이스 같은 것에)
 아이템을 밀어넣음(push, 푸시)으로써 삽입하고 가장 최근에 삽입한 아이템이 튀어나옴(pop, 팝)으로써
 제거하는 것에서 유래되었습니다. 또한 선입후출(last in, first out=마지막에 넣은 것이 처음 나옴)이라는
 특징에서 스택의 삽입/삭제에서 아이템을
 선택하는 정책을 줄여서 LIFO 정책(discipline)이라고도 부릅니다. 큐는 제일 나중에(least recently) 삽입된 아이템을 제거합니다. 큐와 삽입과 삭제를 스택의 삽입과 삭제와 구분하는 영어 용어로 아이템을 삽입할 때를 enqueue, 삭제할 때를 dequeue라고 합니다. 또한 큐의 선입선출(first in, first out=처음 넣은 것이 처음 나옴) 특징으로 인해
 큐의 삽입/삭제에서 아이템을 선택하는 정책을 줄여 FIFO 정책이라고 부릅니다. 이제 스택과 큐를 구현하는 방법을 다룹시다. 오늘의 부제는 모듈러프로그래밍(modular programming)입니다. 이 강의 전반에서 주의 깊게 지켜야 할 규율(discipline) 중 하나입니다. 요약하자면, '인터페이스와 구현을 완전히 분리해라'입니다. 자료구조의 타입, 즉 구체적으로 스택과 큐 등의 타입을 정의할 때, 자료구조의 사용자(client)가 구현의 상세를 전혀 모르도록 하는 겁니다. 사용자는 (성능이나 안정성, 타겟 머신 등을 고려해)
 여러 다른 구현을 고를 수 있지만 사용자의 코드는 (인터페이스에서 명시된) 기본 연산만으로 수행되어야 합니다. 반면 구현은 사용자의 요구에 대한 상세를 모릅니다. (구현을 만드는 사람이) 해야 할 것은 그저 주어진 연산을 (명세대로) 구현하는 겁니다. 이런 방법을 통해 여러 사용자들은
 기본 연산의 구현을 재활용할 수 있게 됩니다. 이를 통해 모듈화된 재사용가능한 알고리즘/자료구조 라이브러리를 만들 수 있게 되고, 이를 더 복잡한 알고리즘과 자료구조를 구축하는데 활용할 수 있습니다. 또한 필요한 경우 성능에 집중할 수 있게 해줍니다. 강조하면, 이러한 것이 Java와 같이
 객체 지향 프로그래밍 (object-oriented programming) 언어에 의해 실현이 간편해진 모듈러프로그래밍 스타일입니다. 따라서 이러한 스타일의 사용에 매우 익숙해져야 합니다. 이제 시작점으로 스택을 이야기합시다. 스택은 익숙하죠? 여러분 다수는 기초 프로그래밍 수업에서
 스택을 구현해봤을 겁니다. 여기서는 그 구현에 대한 구체적인 소개를 합시다. 몸풀기로, 문자열의 집합이 주어졌다 합시다. 어떤 건 짧을 수도 있고, 길 수도 있습니다. 이 스택 구현에서 하려는 것은
 주기적으로 문자열 집합을 저장하고, 삭제하고, 최근에 추가된 문자열을 리턴하는 능력을 얻고자 함입니다. 문자열 집합이 비어있는지도 알고 싶을 거고요. 여기 우리 응용 프로그래밍 인터페이스(API)가 있습니다. 먼저 빈 스택을 만들 생성자(constructor)
 StackOfSrings()가 있습니다. 삽입 연산을 위해, 문자열을 인자(argument)로 받는
 push()라는 메소드도 있고요. 삭제 연산을 위해, 가장 최근에 삽입된 문자를
 리턴하는 pop()이라는 메소드도 있습니다. 스택이 비어있는지를 확인해 참/거짓을 boolean
 데이터 타입으로 리턴하는 isEmpty() 메소드도 있네요. 몇몇 응용에서는 스택에 포함된 문자열의 수를 리턴하는 size() 메소드도 포함시킬 수 있습니다. 다시, 언제나와 같이, 자료구조를 사용하는 사용자, 즉 클라이언트를
 먼저 작성하고, 구현을 살펴보겠습니다. 이 간단한 클라이언트는 표준 입력에서
 (화이트스페이스로 분리된) 문자열들 또는 하이픈("-")으로 표기되는 pop 명령을 받아들입니다. 다시 말해, 이 클라이언트는 표준 입력으로부터 문자열을 읽고 문자열이 하이픈 문자와 동일하면 스택의 상단(top)에 있는 문자열을 pop해서 출력합니다. 그렇지 않으면, 즉 읽은 문자열이 하이픈 문자가 아니면 그 문자열을 스택에 push합니다. 여기 아래에 있는 예시를 보면 tobe.txt('to be dot text'로 읽음)라는 파일이 있을 때, 클라이언트는 "to" "be" "or" "not" "to" 까지를 스택에 삽입합니다. 그리고 여기 가리키는 하이픈 문자가 문자열로 읽히면 이 경우엔 최근에 삽입된 아이템인 "to"를 pop합니다. 스택의 상단에 "be"를 삽입한 뒤, 스택의 상단에 있는 아이템인 "be"를 pop합니다. 가장 최근에 삽입되었으니까요. 앞에서 "to"을 삭제했고, 이제 "be"가 삭제됐으니,
 그 뒤의 pop은 "not"을 삭제할 거고, 그렇게 계속 진행됩니다. 이 코드가 우리의 스택 구현을 테스트하기 위해 사용한 간단한 테스트 클라이언트입니다. 이제 스택을 구현한 코드를 살펴봅시다. 우리가 살펴보려는 첫 구현은 연결 리스트(linked list)를 사용합니다. 여러분이 연결 리스트에 익숙하지 않다면 교재의 1.1절부터 1.3절까지를 읽어볼 필요가 있습니다. 또는 프로그래밍 부교재인 "Introduction to Programming in JAVA"책도 좋고요. 연결 리스트에 익숙하더라도, 이 코드를 볼 가치는 충분한데요. 더욱 복잡한 자료구조를 구현하기 위해
 이 강의에서 계속 사용될 코딩 스타일로 작성했기 때문입니다. 이 구현에서는 문자열과 함께 연결 리스트 상의 다음 아이템을 가리키는 레퍼런스로 구성된 노드로 이루어진 연결 리스트를 유지합니다. 이를 스택으로 만들기 위해 push 연산을 구현할 때는 연결 리스트의 시작점에 새 노드를 삽입합니다. pop 연산을 구현할 때에는 연결 리스트의 시작점에 위치한 첫 노드를 삭제합니다. 그 노드가 가장 최근에 삽입된
 아이템을 담고 있으니까요. 그 코드가 어떤지 살펴봅시다. 이 강의 전반에 걸쳐서, 연결된 자료구조는 연결 리스트로 구현할 거고요. 이 때 (class앞에 private를
 표기하는) JAVA의 내부 클래스(inner class)를 사용합니다. 여기는 내부 클래스를 사용해 Node라는
 객체가 item이라 불리는 문자열과 다른 노드를 가리키는 레퍼런스로
 구성되도록 하는 방법을 보여줍니다. 연결 리스트에서 pop 연산은 매우 쉽게 구현가능합니다. 먼저, 리스트의 첫 아이템을 리턴할 필요가 있는데, 바로 리턴할 수는 없으니 이를 먼저 저장해둡니다. 첫 아이템을 가져와서 변수 item에 저장했죠. 첫 노드를 제거하기 위해 포인터를 전진시킵니다. 즉, 첫 번째 아이템에 대한 '노드'를 참조한 first가
 다음 아이템에 대한 '노드'를 가리키도록 합니다. 그러면 참조가 없어진 첫 번째 '노드'는
 가비지 콜렉터(garbage collector)에 의해 재활용(reclaim)됩니다. 마지막으로 우리가 할 일은 우리가 저장해 둔
 문자열 item을 리턴하는 겁니다. 지금까지 pop 연산이었고요. 그러면 push 연산은 어떨까요? Push 연산에서는 연결 리스트의 시작에 새 노드를 삽입해야 합니다. 따라서 리스트의 시작 노드를 가리키는
 포인터(참조)를 저장해두는 겁니다. oldfirst = first;가 되도록 하는 거죠. 다음으로 새로운 노드를 만들어 연결 리스트의 시작에 그 노드를 넣는 작업을 합니다. first = new Node();가 그 의미입니다. 그 뒤에 인스턴스 변수를 설정합니다. 연결 리스트의 시작에 넣고자 하는 문자열이 아이템이 될 텐데, 여기서는 문자열 "not"이네요. 다음으로 연결 리스트에서 oldfirst가 참조하는 아이템이 연결 리스트의 두 번째 아이템이 되도록 하는 것입니다. 이 연산 뒤에, 연결 리스트의 시작 노드를 foint가 가리키고 있게 됩니다. 이런 방식으로 스택에 넣었던 시점의 내림차순으로 아이템이 연결 리스트에 들어가게 됩니다. 이것이 스택의 push 연산을 구현하기 위한 개략(foreliner)입니다. 여기 JAVA로 작성된 코드는 연결 리스트로
 문자열을 저장하는 스택을 전체적으로 구현한 것입니다. 이 코드에서는 생성자(constructor)가
 할 일이 없어서 생성자가 없습니다. 연결 리스트의 아이템을 저장하는 노드는 내부 클래스로 선언되었고 인스턴스 변수들에서 바로 사용되고 있습니다. LinkedStackOfStrings 클래스의
 인스턴스 변수 first는 연결 리스트의 첫 노드에의 참조로 쓰이고, 초기값은
 null(가리키고 있지 않음을 의미)로 시작합니다. isEmpty() 메소드는 first가 가리키는 노드가
 null인지 아닌지 (즉 스택이 비었는지 아닌지)를 검사합니다. push()는 4 줄의 코드로 되어 있는데,
 앞 슬라이드에서 설명했고요. pop()는 3 줄의 코드로 되어 있으며
 그 앞 슬라이드에서 설명했습니다. 이로써 어느 사용자에서도 쓸 수 있는
 괜찮은 푸시다운(push-down) 스택을 연결 리스트 기반으로 완전히 구현한 것을 살펴봤습니다. 이제 이 구현의 성능을 분석해서, 자료구조의 알고리즘의 수행 능력에 대한 정보를 사용자에 제공할 수 있습니다. 여기서는, 각 연산은 최악의 경우에 상수 시간이 걸림을 쉽게 보일 수 있습니다. 연산의 각 줄이 몇 개의 명령(instruction)으로 되어 있으니까요. 특히, 반복문이 없죠. 따라서 이는 명백히 매우 바람직한 특성입니다. 그럼 공간 사용량을 분석하면 어떨까요? 이는 작성한 구현과 사용하는 머신에 따라 매우 다릅니다만 우리가 분석하려는 대상은 일반적인 JAVA 구현이라 합시다. 여러분은 다양한 종류의 환경에서 작성한 구현을 테스트해 볼 수 있을 것이며,
 지금 것은 대표 사례에 해당하겠습니다. 여기에 내부 클래스가 있는데 JAVA에서는 (내부 클래스 뿐만 아니라) 각 객체에 대해
 16 바이트의 공간 오버헤드가 발생합니다. 덧붙여, 이 클래스는 내부 클래스라서 8 바이트의 추가 오버헤드가 발생합니다. 우리가 구현한 클래스 Node에는 2 개의 참조가 있는데, 하나는 문자열(String) 클래스이고, 다른 하나는
 Node 클래스로 각각 8 바이트를 필요로 합니다. 따라서 스택에 들어가는 Node 객체 하나에 40 바이트가 필요합니다. N 개의 노드로 구성된 스택이라면 40N 바이트가 필요하겠죠. 추가로 first 변수에 추가 오버헤드가 조금 있습니다만, 전체 스택에 대한 오버헤드가 입니다. 반면, N이 커지면, 40N은 필요한 공간의 양에
 충분히 가까워지는 추정량(estimate)이 됩니다. 지금 분석은 문자열 그 자체에 대한 공간을 포함하지 않았으며, 그 문자열들은 클라이언트 프로그램이 소유하고 있습니다. 하지만 이와 같은 방법으로, 다른 클라이언트 프로그램에 대해 이 구현의 자원 사용량을 적절하게 평가할 수 있습니다. 현재 우리의 구현의 각 연산은 상수 시간이
 걸립니다만, 더 빠른 스택 구현도 있습니다. 몇몇 알고리즘에서는 스택이 반복문 안에서 사용되므로 더 빠른 구현을 고민할 필요가 있습니다. 스택을 구현하는 다른 자연스러운 방법은 스택에 아이템을 넣기 위해 배열을 활용하는 겁니다. 그 방법을 봅시다. (참조를 통해) 연결된 자료 구조와, 연속적인 자료구조인 배열 중 하나를 선택하는 것은 근본적이라서, 계속해서 반복해 등장할 겁니다. 더 복잡한 자료구조와 알고리즘을 고려해야 할 때에요. 우리는 스택에 한정지어 간단한 사례를 분석하려고 하는데, 후에 더 복잡한 응용을 다룰 기반을 준비하기 위함입니다. 배열을 쓰기 위해, 스택의 N개 아이템을 배열에 넣어 보관하고, 인덱스 N이 가리키는 배열의 장소를 스택의 상단(top), 즉 다음 아이템이 들어갈 공간이라 하곘습니다. push 연산에서는, s[N]에 새로운 아이템을 넣을 수 있고, pop 연산에서는 N보다 하나 작은 인덱스 N-1에 위치한 s[N-1]을 삭제하면 됩니다. 배열을 사용하면 근본적으로 발생하는 약점이 있죠. 바로 배열의 크기를 사용 전에 선언해야만 해서 스택의 용량(capacity)이 배열의 크기로 제한된다는 점입니다. 용량보다 스택에 더 많은 아이템이 들어가야 한다면 이 약점으로 발생하는 문제를 해결해야 합니다. 이 문제는 배열을 활용하는 모든 종류의 알고리즘과 자료구조에서 발생해 해결해야 하는 근본적인 문제입니다. 다시 말하지만, 후에 다시 다루어야 할
 이 상황에 대해 한 번 고민해보기 바랍니다. 여기 스택을 표현하기 위해 배열을 사용한
 스택 구현의 전체 코드가 있습니다. 문자열 배열인 인스턴스 변수가 여기 있고요. N이라는 변수는 스택의 크기이자
 새 아이템을 넣을 위치에 대한 인덱스를 의미합니다. 이 구현에서는 생성자가 있고요,
 이 생성자는 배열을 생성합니다. 구현을 단순하게 하기 위해서 조금 치사하지만, 후에 이 치사한 방법에 대해 살펴보겠습니다만, 사용자가 스택의 용량을 미리 제공하도록 요구하였습니다. 몇몇 응용에서는, 큰 문제가 없겠지만 많은 응용들에서 아주 부담스러운 요구사항입니다. 사실 사용자는 스택이 얼마나 커질 지 알 수 없으니까요. 사용자는 많은 스택을 동시에 유지해야 할 수 있으며, 서로 다른 시점에 최대 용량에 도달하는 등의 문제를 겪을 수 있습니다. 따라서 이 치사한 방법은 제거할 필요가 있고, 그럴 예정입니다만, 용량이 정해진다면 코드 작성이 매우 뻔해집니다. 스택이 비었는지 확인하기 위해 N이 0인지만 확인하면 되고요. 아이템을 삽입하기 위해 배열의 인덱스 N을 그대로 사용하고 아이템을 삽입한 뒤에 N을 1 증가시키면 됩니다. 여기 N++은 요즈음의 많은 프로그래밍 언어에서 인덱스를 사용한 뒤 바로 1 증가시키기 위해 사용됩니다. 아이템을 제거할 때에는, 인덱스를 1 감소시킨 뒤에 감소된 인덱스를 활용해 배열에 있는 아이템을 리턴합니다. 그래서 각 연산은 한 줄짜리입니다. 이 구현은 몇몇 클라이언트 프로그램에서는 괜찮은 구현입니다. 스택을 배열로 구현한 것이고요. 다만 사용자가 용량을 제공하도록 요구한다는 점에서 API를 망칩니다. 그럼 이 문제에 대해 우리가 이제 뭘 해야 할까요? 우리가 고려하지 않은 몇 가지 사안들이 있습니다. 클라이언트 프로그램이 빈 스택에서 pop 연산을 할 때 예외를 발생(throw an exception)시키는 코드를 넣지 않았습니다. 집어넣으셔야 합니다. 오버플로우(overflow), 즉 클라이언트가 너무 많은 아이템을
 스택에 넣으려고 하면 어떤 일이 벌어질까요? 곧 리사이징(resizing)이라 불리는 방법에 대해 논의할 것인데 이를 통해 사용자가 오버플로우 문제를 회피할 수 있게 됩니다. 다른 이슈로 사용자가 자료구조에 null 아이템을 넣는 걸 허용할까에 대한 문제가 있습니다. 지금 구현에서는 null 아이템을 삽입하는 게 허용됩니다. Java의 경우 메모리 누수의 한 종류인
 로이터링(loitering)을 신경 쓸 필요가 있습니다. 로이터링이란 더 이상 사용되지 않는 객체에 대한 참조를 스택 내부의 배열에 저장해두는 문제를 말합니다. 우리가 N의 값을 감소시키면, 배열 내에는 스택에서는 제외된 아이템의 포인터가 남아있지요. 우리 입장에선 그 포인터가 쓰이지 않음을 알 수 있음에도,
 JAVA 시스템은 알 방법이 없습니다. 이 문제를 피하고 메모리를 가장 효율적으로 쓰기 위해서는 제거된 아이템에 대한 배열 공간을 null로 설정하는 것이 최선입니다. 그러면 기존 아이템에 대한 참조가 없어지고, 가비지 컬렉터가 참조가 완전히 없어졌다면 해당 메모리 공간을 재활용할 것입니다. 너무 자세한 내용입니다만, 메모리를 가장 효율적으로 쓰기 위해서 구현 시에 고려해야만 하는 중요한 내용 중 하나입니다. [무음]