好，接下来我们简要考虑一下使用相同基本底层数据结构的 队列的实现。那么，这是字符串队列对应的API 实际上和栈的API是相同的，只是名字不一样 入栈换成了入队（enqueue），出栈换成了出队（dequeue）。语义 是不同的。入队操作向队尾添加元素，而出队操作从 队首移除元素。就像你排队买票一样 入队时你排在队列的最后，在队列里待的最久的人是下一个 离开队列的人。那么我们先看看怎么用链表实现队列的操作 然后再用数组实现。现在，队列的链表表示中 我们需要维护两个指针引用。一个是链表中的第一个 元素，另一个是链表最后一个元素。插入的时候我们在 链表末端添加元素，而不是在链表头。移除元素的时候 不变，依然从链表头取出元素。那么这就是出队操作的实现 和栈的出栈操作的代码是一样的。保存元素，前进指针 指向下一个节点，这样就删除了第一个节点，然后返回该元素。一模一样 添加节点，或者入队操作时，向链表添加新节点。我们要把它放在链表末端 这样它就是最后一个出队的元素。首先 要做的是保存指向最后一个节点的指针，因为我们需要 将它指向下一个节点的指针从null变为新的节点。然后给 链表末端创建新的节点并对其属性赋值，将旧的指针 从null变为指向新节点。依然只需要几行代码 这是基本的链表操作。实际上多年前我们教算法与 数据结构课程的时候课程中大部分都是这样的 指针操作，但现在仅限于如栈和队列这样的少数 几个实现以及一些其他的基本数据结构。所以我们再也 不需要那么多操作链表的通用程序。我们把它们封装在 这样的基本数据类型里了。好，回到我们完整的实现 这里不仅集合了前几页的代码 还处理了当队列为空时的特殊情况 为了保证去除最后一个元素队列是空的，我们将last设为null 还保证first和last始终都是符合我们预想的 这些细节比较简单。好，那么用数组实现呢？我们 就不详细讲了，用可调大小的数组实现并不难 但绝对是一个棘手的编程练习 值得一试。我们维护两个指针，分别指向队列中的 第一个元素和队尾，即下一个元素要加入的地方 那么对于入队操作在tail指向的地方加入新元素，出队操作移除 head指向的元素。棘手的地方是一旦指针的位置超过了数组 的容量，必须重置指针回到0，这里需要多写一些代码 而且和栈一样实现数据结构的时候你需要加上调整容量的方法 这个留下作为课后练习