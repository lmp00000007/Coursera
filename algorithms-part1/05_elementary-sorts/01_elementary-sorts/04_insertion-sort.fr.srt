1
00:00:01,072 --> 00:00:06,008
Maintenant, nous allons nous intéresser au tri par insertion
qui est une autre méthode de tri de base et,

2
00:00:06,008 --> 00:00:10,033
c'est intéressant, présente des performances
et des caractéristiques assez différentes du

3
00:00:10,033 --> 00:00:16,059
tri par sélection. Regardons une démo
du tri par insertion. Pour ce tri, ce que

4
00:00:16,059 --> 00:00:22,009
nous allons faire est de faire avancer un indice i
de la gauche à la droite comme précédemment. Mais maintenant,

5
00:00:22,009 --> 00:00:27,052
à la ième itération, nous allons déplacer a(i)
vers une position parmi les éléments

6
00:00:27,052 --> 00:00:37,620
à sa gauche. Regardons comment ça marche
sur notre exemple avec des cartes. Bien donc nous commençons

7
00:00:38,007 --> 00:00:43,302
en initialisant i vers la première carte et nous suivons
le principe que tout ce qui est à gauche de i

8
00:00:43,302 --> 00:00:48,621
va être trié et tout ce qui est
à droite, nous n'allons pas nous y intéresser

9
00:00:48,621 --> 00:00:54,423
du tout. Donc, tout ce qui est à gauche de i
est en ordre croissant, tout ce qui est à droite

10
00:00:54,423 --> 00:01:00,319
nous ne l'avons pas encore vu du tout. Ainsi,
quand nous augmentons i de 1, dans ce cas

11
00:01:00,319 --> 00:01:05,258
c'est déjà en ordre, nous n'avons
rien d'autre à faire. Dans le troisième cas

12
00:01:05,258 --> 00:01:10,599
maintenant, quand i pointe vers la troisième entrée
du tableau. Là, nous commençons avec un indice j et nous le déplaçons

13
00:01:10,599 --> 00:01:16,750
vers la gauche en commençons à i et ce que
nous devons faire est d'échanger le 5 avec

14
00:01:16,750 --> 00:01:21,867
chaque élément à sa gauche qui est plus grand.
Donc d'abord nous l'echangeons avec le 10.

15
00:01:21,867 --> 00:01:27,358
Il n'est toujours pas à sa place, donc nous l'échangeons
avec le 7. Maintenant, nous atteignons

16
00:01:27,358 --> 00:01:32,288
le début du tableau et soit nous
avons fait ça, nous avons atteint un élément

17
00:01:32,288 --> 00:01:38,342
plus petit et de ce fait tout le monde à gauche de i
est dans le bon ordre. Donc maintenant nous augmentons i

18
00:01:38,342 --> 00:01:44,080
de 1 encore une fois et nous arrivons au trois.
Encore une fois, nous l'échangons tant que la carte

19
00:01:44,080 --> 00:01:50,862
située juste à sa gauche est plus grande.
Une fois que nous avons fait ça, nous avons

20
00:01:50,862 --> 00:01:55,515
tous les éléments à gauche de i dans l'ordre
croissant. Maintenant, dans cette situation, nous avons

21
00:01:55,515 --> 00:02:00,119
le huit et nous avons seulement à faire un échange
et déjà, il y a le 7 à sa gauche et

22
00:02:00,119 --> 00:02:05,506
tout est en ordre. Là nous avons réussi
à mettre tout en ordre avec moins de travail.

23
00:02:05,506 --> 00:02:11,015
Nous ne sommes pas toujours obligés
de revenir sur tout le tableau jusqu'à son départ. Pour l'échanger

24
00:02:11,015 --> 00:02:18,107
avec tous les éléments à sa gauche qui sont plus grands,
jusqu'à ce que nous trouvions un plus petit élément

25
00:02:18,107 --> 00:02:25,227
dans l'ordre croissant. Pour le 2, il faut retourner
jusqu'au début du tableau. Mais pour 

26
00:02:25,227 --> 00:02:32,729
le suivant, le 9, il faut seulement
revenir d'une position en arrière. Pour le 6,

27
00:02:32,729 --> 00:02:40,802
il faut revenir à peu près à la moitié. Et alors,
nous avons trié le tableau en entier.

28
00:02:40,802 --> 00:02:46,828
Nous pouvons considérer le tri par insertion
en terme d'invariants. Nos pointeurs parcourent

29
00:02:46,828 --> 00:02:51,906
toujours le tableau de la gauche à la droite, mais
là, les éléments à la gauche du pointeur,

30
00:02:51,906 --> 00:02:56,729
en l'incluant, sont triés, alors que
les éléments à la droite n'ont pas encore été

31
00:02:56,729 --> 00:03:01,423
vus du tout. Il faut que nous nous intéressions
au programme qui va maintenir cet invariant

32
00:03:01,423 --> 00:03:07,213
alors que le pointeur avance. En déplaçant
le pointeur vers la droite, il a augmenté de 1.

33
00:03:07,213 --> 00:03:12,227
Maintenant, l'invariant est cassé
parce que l'élément indiqué par

34
00:03:12,227 --> 00:03:17,507
le pointeur n'est pas trié. Pour le remettre
à sa place, nous devons nous déplacer

35
00:03:17,507 --> 00:03:22,356
de la droite vers la gauche et l'échanger avec
chaque élément plus grand que lui à sa gauche.

36
00:03:22,356 --> 00:03:29,235
C'est ce que fait le code en bas. j commence 
à i, j est diminué de 1, et on échange j avec

37
00:03:29,235 --> 00:03:36,608
les éléments à sa gauche. A(j) avec
l'élément à sa gauche, a(j) - tant que 

38
00:03:36,896 --> 00:03:43,200
a(j) est moins que a(j-1) et que j est 
plus grand que zéro. Ceci nous donne immédiatement

39
00:03:43,200 --> 00:03:50,582
ça, le code pour le tri par insertion
qui est semblable à notre code pour le tri

40
00:03:50,582 --> 00:03:56,563
par sélection et tout aussi simple, il a deux
boucles for emboitées. Le tri par sélection avait

41
00:03:56,563 --> 00:04:02,619
deux boucles emboîtées, un test de comparaison
et un échange à l'intérier de la boucle for.

42
00:04:02,619 --> 00:04:09,050
C'est une mise en oeuvre tout à fait valable
d'une méthode de tri de base. Que dire en ce qui concerne

43
00:04:09,050 --> 00:04:15,882
l'analyse du tri par insertion? C'est plus compliqué.
Notre proposition dit que pour trier par insertion

44
00:04:15,882 --> 00:04:21,722
un tableau de clés distinctes dans un ordre aléatoire
cela nécessite de l'ordre de un quart N^2

45
00:04:21,722 --> 00:04:29,033
de comparaisons et à peu près le même nombre,
un quart N^2 d'échanges en moyenne.

46
00:04:29,033 --> 00:04:34,760
C'est plus compliqué à prouver.
Cela dépend du tableau qui est ordonné

47
00:04:34,760 --> 00:04:41,008
aléatoirement. Mais encore une fois, vous pouvez sentir
d'où cette proposition vient en

48
00:04:41,008 --> 00:04:46,212
regardant cette carte N par N. Encore ici,
les éléments noirs sont ceux que

49
00:04:46,212 --> 00:04:51,968
nous comparons et en fait, ce sont aussi
les éléments échangés. Et le rouge et celui

50
00:04:51,968 --> 00:04:57,523
qui est finalement mis à sa place. Vous pouvez
voir que pour un grand tableau 

51
00:04:57,523 --> 00:05:02,578
ordonné de manière aléatoire, l'élément que nous
plaçons va devoir revenir à peu près de moitié

52
00:05:02,578 --> 00:05:07,780
en arrière, en moyenne. Ce qui signifie que de l'ordre
de la moitié des éléments en dessous la diagonale

53
00:05:07,780 --> 00:05:13,839
seront noirs en moyenne puisque N^2 / 2
en dessous de la diagonale, la moitié de ça

54
00:05:13,839 --> 00:05:20,142
est N^2 / quatre. L'analyse précise
n'est pas plus détaillée que ça.

55
00:05:20,142 --> 00:05:27,073
Voici une plus grosse carte qui montre encore
que la moitié des éléments en dessous de la diagonale

56
00:05:27,073 --> 00:05:35,189
sont impliqués dans le tri. Regardons
cette animation. Puisque N^2 / quatre

57
00:05:35,191 --> 00:05:41,663
versus N^2 / deux, le tri par insertion est 
à peu près deux fois plus rapide que le tri

58
00:05:41,663 --> 00:05:49,307
par sélection. Donc nous pouvons traiter
deux fois plus d'éléments dans la trace pour la même durée

59
00:05:49,307 --> 00:05:57,037
de temps. On prend un élément, et on le ramène
jusqu'à sa position, à chaque fois. Donc ça c'est

60
00:05:57,037 --> 00:06:04,068
une animation pour des éléments désordonnés.
En pratique, le tri par insertion dépend de l'ordre initial

61
00:06:04,068 --> 00:06:11,012
des données. Regardons ce que ça donne
pour le meilleur et le pire cas qui sont

62
00:06:11,012 --> 00:06:17,175
probablement intéressant. Si le tableau est
déjà trié, tout ce que le tri par insertion fait

63
00:06:17,175 --> 00:06:22,759
est de valider que chaque élément
a bien un élément plus petit

64
00:06:22,759 --> 00:06:28,079
à sa droite donc il ne fait pas d'échange
donc le travail de tri se termine en ayant effectué seulement

65
00:06:28,079 --> 00:06:33,818
N - une comparaisons. D'un autre côté,
si le tableau est en ordre décroissant sans

66
00:06:33,818 --> 00:06:40,373
doublon, alors chaque élément doit
parcourir tout le tableau en arrière. Cela fait N^2 / deux comparaisons

67
00:06:40,373 --> 00:06:46,717
et N^2 / deux échanges. Donc dans le premier cas,
c'est bien plus rapide que le tri par insertion,

68
00:06:46,717 --> 00:06:52,307
en temps linéaire au lieu de quadratique.
Dans le deuxièbe cas, c'est plus lent que le tri 

69
00:06:52,307 --> 00:06:58,162
par sélection car cela utilise à peu près le même nombre
de comparaisons mais beaucoup plus d'échanges.

70
00:06:58,162 --> 00:07:05,131
Alors, observons ça dans l'animation.
Ceci est quand un élément arrive en 

71
00:07:05,131 --> 00:07:10,968
ordre contraire. Là, chaque fois qu'on prend
un nouvel élément, on va l'échanger pendant

72
00:07:10,968 --> 00:07:17,505
tout le chemin en arrière jusqu'au début. C'est le même
type de dynamique pour le tri par sélection

73
00:07:17,505 --> 00:07:24,048
sauf que pour chaque étape, ce n'est pas
juste une comparaison, c'est aussi un échange

74
00:07:24,048 --> 00:07:30,539
ce qui le rend encore plus lent en pratique.
Donc ça c'est le mauvais cas sur lequel nous ne voudrions

75
00:07:30,539 --> 00:07:36,654
pas tomber dans une application mais
il y a aussi un bon cas qui en fait est utile

76
00:07:36,654 --> 00:07:42,356
dans de nombreuses applications pratiques.
Il s'agit du cas pour lequel

77
00:07:42,356 --> 00:07:47,555
le tableau est partiellement trié. Pour 
en parler de manière chiffrée, nous 

78
00:07:47,555 --> 00:07:53,333
définissons ce qui est appelé une inversion.
Une inversion est simplement une paire de clés

79
00:07:53,333 --> 00:07:59,345
qui sont en désordre dans le table. Ici,
ce tableau a 6 inversions, T et R sont dans le désordre

80
00:07:59,345 --> 00:08:05,633
car R devrait arriver avant T. T et P sont en désordre
et ainsi de suite. Ce tableau

81
00:08:05,633 --> 00:08:11,864
a 6 inversions. Et nous disons d'un tableau
qu'il est partiellement trié si son nombre

82
00:08:11,864 --> 00:08:18,042
d'inversions est linéaire, si c'est 
moins qu'une certaine constante fois N. Et les tableaux

83
00:08:18,042 --> 00:08:23,954
partiellement triés sont courant en pratique.
Par exemple, si vous avez un grand tableau

84
00:08:23,954 --> 00:08:30,344
qui est trié sauf  pour quelques éléments
non triés ajoutés à la fin

85
00:08:30,344 --> 00:08:36,313
ce sera un tableau partiellement trié.
D'un autre côté, si vous avez seulement

86
00:08:36,313 --> 00:08:41,340
quelques éléments en désordre, le tableau
est partiellement trié. Ce genre de choses

87
00:08:41,340 --> 00:08:45,891
se produit fréquemment dans des applications
pratiques et ce qui est intéressant avec

88
00:08:45,891 --> 00:08:50,825
le tri par insertion c'est qu'il s'exécute
en temps linéaire pour des tableaux partiellement triés.

89
00:08:50,825 --> 00:08:56,262
La preuve tient dans le fait que le nombre de comparaisons
est égal au nombre d'échanges

90
00:08:56,262 --> 00:09:01,632
qui est égal au nombre d'inversions
et à la fin il y a

91
00:09:01,632 --> 00:09:07,028
une comparaison supplémentaire pour chaque élément
sauf le premier. Donc regardons ce que ça donne

92
00:09:07,028 --> 00:09:12,041
sur l'animation. On a là un tableau partiellement
trié et vous pouvez voir que le tri par insertion

93
00:09:12,041 --> 00:09:17,042
fait très rapidement le travail. Nous allons
tirer partie de cette propriété un peu plus

94
00:09:17,042 --> 00:09:27,092
tard dans ce cours. Voilà le tri par insertion,
notre deuxième algorithme élémentaire de tri.