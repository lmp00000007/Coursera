1
00:00:02,190 --> 00:00:03,642
이제 우리는 흥미롭게도 선택 정렬과

2
00:00:03,642 --> 00:00:07,730
성능 특성이 상당히 다른 또다른

3
00:00:07,730 --> 00:00:10,560
기본 방법인 삽입 정렬을 살펴보겠습니다.

4
00:00:13,190 --> 00:00:15,960
삽입 정렬의 데모를 살펴보겠습니다.

5
00:00:15,960 --> 00:00:19,860
삽입 정렬의 경우, 우리가 할 것은 우리는 이전처럼 색인 i를

6
00:00:19,860 --> 00:00:23,670
왼쪽에서 오른쪽으로 이동할 것이지만, 하지만 지금은, i번째 반복문에서,

7
00:00:23,670 --> 00:00:27,860
우리는 a[i]를 그것의 왼쪽에 있는 원소 사이의 위치로 이동할 것입니다.

8
00:00:27,860 --> 00:00:30,820
카드로 우리의 사례가 어떻게 작동하는지 보겠습니다.

9
00:00:33,570 --> 00:00:38,527
그럼, 이제 우리는 첫번째 카드에 i를 초기화하는 것으로 시작하고,

10
00:00:38,527 --> 00:00:44,826
기본적인 아이디어는 i 왼쪽은 정렬될 것이고,

11
00:00:44,826 --> 00:00:49,920
오른쪽에서의 모든 것을 우리는 살펴보지 않을 것입니다.

12
00:00:51,350 --> 00:00:55,650
그래서 i의 왼쪽에 있는 모든것은 오름 차순으로 정리되어 있고, 오른쪽에 있는 모든 것들은,

13
00:00:55,650 --> 00:00:57,680
우리는 아직 전혀 본 적이 없습니다.

14
00:00:57,680 --> 00:01:01,010
그럼 이제 우리가 i를 늘릴 때, 음, 이 경우에는 이미 순서대로 정렬이 되어있어서

15
00:01:01,010 --> 00:01:02,280
우리는 더이상 할 일이 없습니다.

16
00:01:03,680 --> 00:01:08,200
세번째 경우에 이제, i가 배열에서 세번째 항목일 때,

17
00:01:08,200 --> 00:01:14,600
이제 우리는 색인 j에서 시작합니다, 그리고 우리는 i에서 시작하여 왼쪽으로 이동합니다.

18
00:01:14,600 --> 00:01:19,660
그리고 우리가 해야할 일은 단지 5를 왼쪽에 있는 더 큰 원소들과

19
00:01:19,660 --> 00:01:20,610
교환하는 것입니다.

20
00:01:20,610 --> 00:01:24,440
그래서 처음에 우리는 10과 교환했고, 아직 제자리에 없어서,

21
00:01:24,440 --> 00:01:26,390
우리는 7과 교환합니다.

22
00:01:26,390 --> 00:01:30,840
이제 우리는 배열의 시작에 도달하고, 일단 그렇게 하거나

23
00:01:30,840 --> 00:01:36,040
우리가 더 작은 원소에 닿으면, 우리는 i의 왼쪽에 있는 모두를 순서대로 배열하게 된겁니다

24
00:01:37,850 --> 00:01:41,500
그럼 이제 우리는 인덱스 i를 1 증가시켜서, 우린 3으로 넘어가보죠.

25
00:01:41,500 --> 00:01:46,630
다시말해, 우리는 바로 왼쪽에 있는 카드가 더 큰 한 즉시 교환합니다.

26
00:01:49,830 --> 00:01:50,900
그리고 우리가 이렇게 하고나면,

27
00:01:50,900 --> 00:01:54,160
우리는 왼쪽 값 모두를 오름차순으로 정렬합니다

28
00:01:55,380 --> 00:02:00,030
이제, 이 경우에, 우리는 8이 있고, 그리고 우리는 단 1개만 교환해야하고,

29
00:02:00,030 --> 00:02:03,410
이제 7을 왼쪽에 두고 모두를 순서대로 있습니다.

30
00:02:03,410 --> 00:02:07,000
그래서 우리는 이 경우에 일을 덜 하면서 정돈해낼 수 있었습니다.

31
00:02:07,000 --> 00:02:09,530
우리는 항상 처음으로 거슬러 갈 필요는 없습니다.

32
00:02:10,860 --> 00:02:14,943
4는, 우리가 더 작은 원소를 찾을 때까지 그보다 더 큰 왼쪽에서 모두와 교환하고나서,

33
00:02:14,943 --> 00:02:19,271
오름차순으로 정렬합니다.

34
00:02:19,271 --> 00:02:22,006
2는 배열의 처음까지 도달해야 되겠네요.

35
00:02:27,509 --> 00:02:34,902
하지만 바로 다음에, 9는 오직 한번만 이동하면되고,

36
00:02:34,902 --> 00:02:39,290
6은 반 정도만 돌아가야 합니다.

37
00:02:39,290 --> 00:02:41,320
그리고 나서 우리는 전체 배열을 분류했습니다.

38
00:02:42,350 --> 00:02:46,440
다시, 우리는 불변 면에서 삽입정렬을 살보볼 수 있습니다.

39
00:02:46,440 --> 00:02:49,070
우리의 포인터는 여전히 왼쪽에서 오른쪽으로 스캔하지만,

40
00:02:49,070 --> 00:02:52,930
이제 포인터의 왼쪽에 있는 원소들은, 그것을 포함해서,

41
00:02:52,930 --> 00:02:57,480
순서대로지만, 오른쪽 원소들은 아직 전혀 보이지 않았습니다.

42
00:02:57,480 --> 00:03:00,990
그래서 우리는 포인터가 증가함에 따라 불변하는 상태를 유지하는 코드를

43
00:03:00,990 --> 00:03:03,040
살펴보아야 합니다.

44
00:03:03,040 --> 00:03:05,805
포인터를 오른쪽으로 움직이면, 다시 증가합니다.

45
00:03:05,805 --> 00:03:10,148
포인터의 성분이 정렬되지 않아서

46
00:03:10,148 --> 00:03:13,650
이제 불변은 부서졌습니다.

47
00:03:13,650 --> 00:03:18,176
잘 정돈하기 위해서, 우리는 오른쪽에서 왼쪽으로 이동해야하고, 왼쪽값이 클 때마다 항상

48
00:03:18,176 --> 00:03:22,787
왼쪽값과 교환하고, 그것이 밑에 있는 코드가 하는 것입니다.

49
00:03:22,787 --> 00:03:26,824
i에서 시작하는 j로 시작하고, j의 감소,

50
00:03:26,824 --> 00:03:31,804
그 왼쪽 요소들과 j를 교환하고,

51
00:03:31,804 --> 00:03:37,051
a[j]를 a[j-1]과 교환합니다

52
00:03:37,051 --> 00:03:43,680
a[j]가 a[j-1]보다 작다면 말이죠

53
00:03:43,680 --> 00:03:48,030
그리고 그것은 즉시 삽입 정렬에 이 코드를 주는데,

54
00:03:48,030 --> 00:03:54,290
이것은 우리의 선택정렬 코드와 유사하고 간단합니다.

55
00:03:54,290 --> 00:03:58,707
중첩된 두개의 루프가 있는데, 선택정렬은 두개의 중첩된 루프,

56
00:03:58,707 --> 00:04:03,210
테스트, 비교, 그리고 루프의 내부 교환이 있습니다.

57
00:04:03,210 --> 00:04:07,220
그리고 그것은 기본적인 분류 방법의 좋은 실행입니다.

58
00:04:08,800 --> 00:04:12,310
삽입 정렬의 분석은 어떻게 할까요?

59
00:04:12,310 --> 00:04:13,830
더욱 복잡합니다.

60
00:04:13,830 --> 00:04:20,340
우리의 명제는 무작위로 정돈된 배열을 분류하는 삽입정렬은,

61
00:04:20,340 --> 00:04:25,660
그것은 약 1/4 N제곱을 비교하고,

62
00:04:25,660 --> 00:04:30,750
그리고 거의 같은 숫자로, 평균적으로, 1/4 N제곱을 교환합니다.

63
00:04:30,750 --> 00:04:33,210
이것은 증명하기 더 복잡합니다.

64
00:04:33,210 --> 00:04:36,650
임의로 정돈하는 배열에 따라 다릅니다.

65
00:04:36,650 --> 00:04:38,930
그리고 다시, 여러분은 이 N을 N추적을

66
00:04:38,930 --> 00:04:44,430
살펴봄으로써 나오는 제안이 나오는 느낌의 형태를 얻을 수 있습니다.

67
00:04:44,430 --> 00:04:47,750
다시말해, 우리가 비교하는 것은 블랙 요소들이고,

68
00:04:47,750 --> 00:04:50,330
교환도 검은 값들에서 이루어집니다.

69
00:04:50,330 --> 00:04:52,940
빨간색 위에 있는 것은 마지막으로 자리 잡은 것입니다.

70
00:04:53,945 --> 00:04:59,129
그리고 여러분은 무작위로 정돈된 큰 배열에서는,

71
00:04:59,129 --> 00:05:03,758
평균 절반정도 되돌아 가야합니다.

72
00:05:03,758 --> 00:05:07,604
즉 대각선 아래에 있는 요소의 절반 정도가 평균적으로 검정색이

73
00:05:07,604 --> 00:05:08,930
된다는 의미입니다.

74
00:05:08,930 --> 00:05:11,000
대각선 아래에 N 제곱 나누기 2가 있고,

75
00:05:11,000 --> 00:05:12,625
절반은 N 제곱 나누기 4입니다.

76
00:05:14,050 --> 00:05:18,510
정확한 분석은 그보다 훨씬 더 상세하지는 않습니다.

77
00:05:20,928 --> 00:05:23,906
이것은 더 큰 추적을 보여주고, 다시,

78
00:05:23,906 --> 00:05:28,725
대각선 아래의 절반 정도의 요소들이 이 종류에 속합니다.

79
00:05:28,725 --> 00:05:35,187
[기침] 애니메이션을 봐봅시다.

80
00:05:35,187 --> 00:05:38,120
N제곱 나누기 2에 비해 N제곱 나누기 4부터,

81
00:05:38,120 --> 00:05:42,450
삽입정렬은 선택정렬보다 두배 정도 빠를 것입니다.

82
00:05:42,450 --> 00:05:47,326
그래서 우리는 추적을 하면 동일한 시간에 두배 정도 되는 항목만큼 할 수 있습니다.

83
00:05:50,796 --> 00:05:55,420
그것은 요소를 잡아서 매번 제자리로 다시 갖다 놓습니다.

84
00:05:57,580 --> 00:06:01,590
그래서 이것은 무작위로 정돈된 항목을 위한 영상이죠.

85
00:06:01,590 --> 00:06:06,650
이제, 삽입정렬은 데이터의 초기 순서에 따라 달라집니다.

86
00:06:07,890 --> 00:06:12,334
확실히 분리된, 가장 좋은 경우와 가장 나쁜 경우를 봅시다.

87
00:06:13,440 --> 00:06:18,090
만약 배열이 이미 정렬되었다면, 모든 삽입정렬은

88
00:06:18,090 --> 00:06:23,080
각 요소들이 그들의 왼쪽에 더 작은 요소가 있음을 실제로 확인하는 것입니다.

89
00:06:23,080 --> 00:06:25,190
그래서 교환하지 않습니다.

90
00:06:25,190 --> 00:06:28,480
정렬 작업 완료는 N 빼기 1에 필적합니다.

91
00:06:29,590 --> 00:06:33,465
반면에, 만약 배열이 내림차순이고

92
00:06:33,465 --> 00:06:37,750
중복이 없다면, 모든 요소들은 되돌아 갑니다.

93
00:06:38,950 --> 00:06:43,170
n제곱 나누기 2를 필적하고 n제곱 나누기 2를 교환합니다.

94
00:06:44,310 --> 00:06:45,780
그래서 첫번째 경우에는, 그것은,

95
00:06:45,780 --> 00:06:50,170
이차함수가 선형이기때문에, 선택정렬보다 훨씬, 훨씬 빠릅니다.

96
00:06:50,170 --> 00:06:53,505
두번째 경우에는, 선택정렬보다 느린데,

97
00:06:53,505 --> 00:06:59,290
왜냐하면 같은 수의 비교를 사용하지만, 더 많은 교환을 사용하기 때문입니다.

98
00:06:59,290 --> 00:07:01,240
자 그럼 영상에서 확인해봅시다.

99
00:07:02,880 --> 00:07:05,990
자 여기 항목들이 역순으로 옵니다.

100
00:07:05,990 --> 00:07:10,540
이제, 새로운 항목을 받을 때마다,

101
00:07:10,540 --> 00:07:13,290
그것은 처음으로 되돌아가 교환해야합니다.

102
00:07:15,530 --> 00:07:20,460
선택정렬과 같은 종류의 동적 특성이죠, 단지,모든 단계를,

103
00:07:20,460 --> 00:07:22,360
단순히 비교하는게 아니라,

104
00:07:22,360 --> 00:07:26,390
서로 교환도 하기 때문에 실제로는 더욱 느립니다.

105
00:07:28,740 --> 00:07:33,180
따라서 이것은 우리가 실제 어플리케이션에서 보고 싶지 않은 나쁜 경우입니다.

106
00:07:34,220 --> 00:07:38,860
하지만 실제로 우리는 많은 실제 어플리케이션에서 활용하는 좋은 경우

107
00:07:38,860 --> 00:07:41,310
또한 있습니다.

108
00:07:41,310 --> 00:07:45,880
그리고 배열이 부분적으로 정렬되어 있을 때 해야합니다.

109
00:07:45,880 --> 00:07:50,900
양적인 방법으로 이것에 대해 이야기 하기 위해, 우리는 역위라 불리는 것을 정의합니다.

110
00:07:50,900 --> 00:07:54,800
역위는 단지 배열에서 잘못된 일련의 키입니다.

111
00:07:56,110 --> 00:07:59,360
그래서 이 배열은 6개의 역위가 있고, R이 T보다 먼저 가야하기 때문에,

112
00:07:59,360 --> 00:08:02,530
T와 R은 잘못되었습니다.

113
00:08:02,530 --> 00:08:05,300
T와 P는 잘못되었습니다.

114
00:08:05,300 --> 00:08:07,119
이 배열은 6개의 역위가 있습니다.

115
00:08:08,260 --> 00:08:12,710
그리고 만약 역외 횟수가 선형이라면, 일정 정수 곱하기 N보다 작다면,

116
00:08:12,710 --> 00:08:16,650
우리는 배열이 부분적으로 정렬되었다고 정의합니다.

117
00:08:18,000 --> 00:08:22,510
그리고 부분적으로 정렬된 배열은 실제로 종종 나타납니다.

118
00:08:22,510 --> 00:08:27,640
예를 들어, 만약 여러분이 큰 배열이 있는데

119
00:08:27,640 --> 00:08:31,170
마지막에 덧붙인 몇개의 정렬되지 않은 요소만 있다면, 그것은

120
00:08:31,170 --> 00:08:34,950
부분적으로 정렬될 것입니다.

121
00:08:34,950 --> 00:08:38,170
또는 다른 경우에는, 만약 여러분이 단지 몇개의 잘못된 항목이 있다면,

122
00:08:38,170 --> 00:08:40,390
배열은 부분적으로 정렬될 것입니다.

123
00:08:40,390 --> 00:08:44,710
이런 종류의 일들은 실제 어플리케이션에서 종종 발생합니다.

124
00:08:44,710 --> 00:08:50,370
그리고 삽입정렬에서 흥미로운 것은 부분적으로 정렬된 배열에 대해

125
00:08:50,370 --> 00:08:52,630
선형으로 실행됩니다.

126
00:08:52,630 --> 00:08:56,410
그리고 그 증거는, 비교의 수와 교환의 수는

127
00:08:56,410 --> 00:09:01,170
교환의 수와 같고 역위의 수와 같고,

128
00:09:01,170 --> 00:09:05,410
첫번째를 제외하고는 모든 요소에 대해 추가적인 비교가 있습니다.

129
00:09:05,410 --> 00:09:08,510
그럼 어떻게 보이는지 영상으로 살펴봅시다.

130
00:09:08,510 --> 00:09:10,800
여기 부분적으로 정렬된 배열이 있고,

131
00:09:10,800 --> 00:09:15,060
여러분은 삽입정렬이 빠르게 완료되는 것을 볼 수 있습니다.

132
00:09:15,060 --> 00:09:18,110
우리는 이 강의에서 조금 더 뒤에 이것을 활용할 것입니다.

133
00:09:20,310 --> 00:09:23,888
여기까지 우리의 두번째 요소 정렬 방법인, 삽입정렬입니다.