La première méthode de tri élémentaire
que nous allons étudier est une méthode simple appelée "tri par sélection". Le principe
du tri par sélection débute avec un tableau désordonné et nous allons utiliser ces cartes
à jouer comme exemple. À la i-ième itération, nous parcourons le tableau pour trouver
la plus petite entrée restante. Dans le cas présent, le 2 est la plus petite des entrées. Alors
nous l'échangeons avec la première entrée du tableau et à ce moment là nous savons
que nous avons avancé d'un pas. Le tri par sélection se base sur la répétition de cette idée. Ainsi,
la méthode de tri par insertion est, à l'itération i, trouver la plus petite entrée restante
à partir de la droite de i - ou avec un plus grand indice que i - et l'échanger avec i.
Alors, quand on commence, i est à l'extrémité gauche et les entrées restantes sont à droite.
Nous pouvons parcourir le tableau et la plus petite est le 2, trois entrées
à droite et nous les échangeons. C'est le premier pas. Là, la partie
du tableau à la gauche de i est dans son ordre final et nous continuons tout simplement. Maintenant,
la plus petite est le 3. Échangeons là avec i, augmentons i de 1. Là nous avons le 2 et le 3
dans l'ordre, continuons de la même manière Trouvons le plus petit, le 4. Échangeons le avec i,
augmentons i de 1. Trouvons le plus petit, c'est 5, échangeons le avec i, augmentons i de 1.
Trouvons le plus petit, échangeons le avec i, augmentons i de 1. À chaque fois, nous devons parcourir
toutes les entrées restantes dans l'ordre pour trouver la plus petite. Mais ensuite, quand
nous l'avons trouvée, il suffit d'échanger les deux cartes. Ce sont les principes clés du tri par
sélection. Là le 8 est le plus petit et nous faisons l'échange. Maintenant nous savons qu'elles sont triées
mais le programme ne le sait pas alors nous devons regarder si i et n sont égaux et dans ce cas
nous échangeons i avec lui-même et pareillement pour la dernière carte. Et là, après
cette procédure, nous savons que le tableau en entier est dans son ordre final, toutes les cartes triées.
Bien. Alors, une manière de comprendre la manière dont l'algorithme fonctionne est
de penser en terme d'invariant. En ce qui concerne le tri par sélection, nous avons un pointeur qui était
notre variable i qui permet d'avancer de la gauche vers la droite. Il est indiqué par une petite flèche
rouge dans cette représentation. Les invariants sont que les entrées à
la gauche de la flèche ne sont jamais changées et qu'elles sont en ordre croissant. Aucune entrée
à la droite de la flèche n'est plus petite qu'une des entrées à sa gauche. C'est la
manière dont nous l'avons mis en place. L'algorithme maintient ces invariants en trouvant
la plus petite entrée à droite et en l'échangeant avec la suivante. Ainsi le programme
met en œuvre l'invariant. Donc pour déplacer le pointeur à droite, nous augmentons i de 1.
Là, l'invariant peut être enfreint aussi nous devons arranger ça. Il peut être enfreint
parce qu'il est possible d'avoir un élément à la droite du pointeur qui est
plus petit que l'élément à la place du pointeur. Donc ce que nous devons faire
c'est identifier l'indice ou cette entrée minimale et les échanger. Dès que nous les avons échangées,
encore une fois nous avons préservé notre invariant. Après ce point, aucun élément à la gauche
du pointeur n'est susceptible de changer et il n'y a pas de plus petit élément
à droite. Ceci nous donne immédiatement notre mise en œuvre
du tri par sélection. Nous identifions la taille du tableau, c'est n. Ensuite
nous avons une boucle for qui parcourt tous les éléments du tableaux. Nous conservons une variable
min qui est l'indice à venir de l'élément le plus petit à la droite
du pointeur i. Nous avons une boucle interne for qui pour tous les j, 
s'il trouve un plus petit remet à jour min et une fois que nous avons parcouru tous les éléments
à la droite de i, nous échangeons le plus petit avec i. C'est une mise en œuvre complète
du tri par sélection. Il est maintenant facile de développer un modèle mathématique pour le coût
du tri par insertion et voici la proposition qui le décrit.
Le tri par insertion effectue de l'ordre de N^2/2 comparaisons et exactement n échanges.
Une simple observation de cette trace d'exécution constitue une preuve
visuelle de cette proposition. Dans ce schéma, les entrées en noir
sont celles qui sont examinées dans le but de trouver le minimum à chaque fois, avec le minimum
en rouge. Les entrées en gris ne sont pas consultées, elles sont dans leur position finale. Donc vous
voyez que cela va être en général un carré de N par N et à peu près
la moitié des éléments dans le carré sont noirs soit N^2/2 et vous pouvez lire aussi la formule
exacte (N-1) + (N-2) etc. qui est le nombre total de comparaisons effectuées.
Pour chacune des N valeurs de la variable i il y a un échange, donc c'est
le coût en terme de nombre d'échanges. Ce qui est important concernant
le tri par sélection c'est que quel que soit l'ordre dans lequel les données
sont, le tri par insertion s'exécutera en temps quadratique parce qu'il doit toujours
parcourir le tableau total pour trouver le minimum. Et une autre propriété est que vous
ne pouvez pas trier en déplaçant moins de données car le tri par insertion effectue juste un nombre linéaire
d'échanges. Chaque entrée est placée à sa position finale avec seulement
un échange. Regardons une animation du tri par sélection en fonctionnement.
Vous pouvez voir notre pointeur se déplaçant de la droite à la gauche chaque fois qu'il trouve le plus petit
élément à droite, et l'échanger à sa position. Si le tableau est partiellement
trié, cela n'a aucun effet sur le tri par sélection Il doit tout de même tout parcourir,
même si c'est totalement trié, il doit malgré tout aller chercher où l'élément minimum est.
C'est l'algorithme de tri par sélection, notre première méthode élémentaire de tri.