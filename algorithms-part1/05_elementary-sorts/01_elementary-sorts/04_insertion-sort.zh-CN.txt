现在我们将学习插入排序 这是另外一种基本排序方法
有趣的是 相比选择排序 插入排序具有相当不同的性能 让我们来看看一个插入排序的演示 对于插入排序，我们要做的和之前一样
从左到右移动索引 i 但现在，在第 i个迭代中 我们将会把 a[ i ] 移动到其左侧的位置 让我们用牌的示例来看看这是怎么工作的 现在我们从初始化 i为第一张牌开始 我们的想法是
i的左边的一切将会被排序 右边的一切，我们全部都不去看 所以，i 左侧所有的东西是升序，右侧所有的东西 我们现在还没检查过 现在我们增加 i 
好，在这种情况下它已经排好序了 我们什么也不用做 在第三种情况下，当 i 是数组中的第三项时 此时我们从索引 j 开始
然后，j 从 i 开始向左边移动 我们要做的是将5与它左边 更大的元素交换 那么，首先与10交换，依然没有到最终位置 所以再和7交换 现在已经到数组最前面了，一旦我们检查完左侧所有项或者 找到一个更小的元素，i 左边所有项就排好序了 再将 i 加一，这次的牌是3 一样的，只要左侧相邻的牌更大，就一直交换 一旦完成之后 从 i 开始它左侧的数组就是升序的 这个情况中，牌是8，只需要交换一次 现在左边是7，i 左边就都排好序了 所以这个情形中我们用更少的工作量就完成了排序 并不总是需要一直检查到数组的开头 4，将它和左边所有比它大的牌交换 直到找到更小的元素，然后 i 的左边就是升序了 2，需要一直检查到数组的开头 而紧接着的下一个，9只需要移动一个位置 6差不多需要移动到中间 然后整个数组就排好序了 我们在从不变式的角度来看插入排序 指针依然是从左至右扫描 但是指针左边的所有元素，包括指针指向的元素 都是排好序的，而右边的元素都还完全没有检查过 我们来看随着指针递增维持 不变式的代码 将指针向右侧移动，增加1 因为指针指向的元素没排过序 所以破坏了不变式 要将它排序，需要将它和左边每个 更大的元素交换，下面的代码完成的就是这个 索引 j 从 i 开始，逐渐变小 j 指向的元素与左边的元素交换 a[j] 与左边的元素 a[j-1] 交换 只要a[j]小于a[j-1]并且 j > 0就一直交换 我们就马上得到了插入排序的代码 与选择排序的代码类似，而且一样简单 有两个嵌套的for循环，选择排序也是一样的 循环中需要进行一次检查，一次比较大小，和一次交换 这是基本排序方法的一个良好的实现 插入排序的分析是怎样的呢？ 插入排序更复杂一些 我们的命题是对具有不同关键值的随机序列排序 插入排序平均需要使用大约1/4 N^2次比较 与大约相同的交换次数 1/4 N^2 这个要证明的话更复杂一些 和随机顺序的数组有关 和选择排序的证明一样，从这个N×N的算法步骤中 你可以找到命题来源的思路 黑色的元素依然是我们比较的 实际上，也是进行的交换 红色的是到达的最终位置 你可以看到对于随机顺序的大数组 要移动到最终位置平均要移动大约一半的位置 这意味着对角线以下的元素 平均一半是黑色的 对角线以下的元素有1/2 N^2个 一半就是1/4 N^2 精确的分析比这个详细不了多少 这个步骤更多，再次显示 排序过程中涉及到对角线下大约一半的元素 我们来看动画 因为1/4 N^2和1/2 N^2相比小一半 插入排序的速度大约是选择排序的两倍 所以相同时间内演示中我们能够对大约两倍的元素进行排序 每次选取一个元素，将它移动到左边合适的位置 这是随机顺序元素的动画 插入排序运行时间取决于数据开始的顺序 我们来看看最好与最坏的情况，当然这些都是异常情况了 如果数组恰好已经排好序了，插入排序 实际上只需要验证每个元素比它左边的元素大 所以不用进行交换 只需要N - 1次比较就能完成排序工作 另一方面，如果数组是降序排列的并且 不存在重复值，每个元素都移动到数组开头 需要进行1/2 N^2 次比较与1/2 N^2 次交换 所以第一种情况下，插入排序比选择排序快得多 是线性时间的而不是平方时间的 第二种情形中，比选择排序慢 因为需要一样的比较次数，但是多得多的交换次数 我们来看动画 这是元素降序排列的情况 每次得到一个新元素 都必须一直交换到最开头 与选择排序的动态特性相同 不同点在于，每一步中插入排序不仅仅是交换 还要进行交换，所以实际中就慢了很多 这是实际应用中我们不想见到的最坏的情况 但也有好的情况，在很多实际应用中我们 都在利用这一点 就是数组已经部分有序的情况 用定量的方法考虑，我们定义“逆序对”(inversion) 逆序对是数组中乱序的关键值对 比如这个数组中有六个逆序对 T和R是乱序的，因为R应该在T的前面 T和P是乱序的，等等 这个数组中有六个逆序对 我们这样定义一个数组是部分有序的，如果其逆序对 数量是线性的，或者说比N乘以某个常数小 部分有序的数组在实际应用中经常遇到 例如，有一个大数组是有序的，只有最后加上的 几个元素是无序的 这个数组就是部分有序的 或者另外的情况，只有几个项不在最终位置 数组就是部分有序的 实际应用中经常出现这样的东西 插入排序有意思的地方在于对于部分有序的数组 它的运行时间是线性的 证明就是交换的次数 与逆序对的个数相等 而除过第一个元素外每个元素需要多一次比较 我们来看动画 这是一个部分有序的数组 可以看到插入排序很快完成了工作 这门课稍后我们将利用这个性质 这就是插入排序
我们学习的第二个基本排序方法