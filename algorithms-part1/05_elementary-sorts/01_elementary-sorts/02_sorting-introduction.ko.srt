1
00:00:00,000 --> 00:00:04,616
좋습니다. 우리가 따를 규칙이 무엇인가요?
자, 기본적인 정렬 문제를

2
00:00:04,616 --> 00:00:10,094
살펴보도록 하지요. 대학교는 각각의 
학생들에 대한 기록들을 가지고 있고

3
00:00:10,094 --> 00:00:16,094
여기에 일부 정보가 있습니다. 아마 수업 번호도 있고, 

4
00:00:16,094 --> 00:00:22,067
학점도 있고, 전화번호도 있고, 주소도 있군요. 
하나의 항목을 보면

5
00:00:22,067 --> 00:00:27,304
우리가 정렬할 기록이나 정보를 가지고 
있습니다. 그러나 

6
00:00:27,304 --> 00:00:32,118
특별히 키라고 불리는 항목들이 있습니다. 
그리고 우리가 하려는 건

7
00:00:32,118 --> 00:00:37,175
키에 순서대로 기록하는 것입니다.
이것이 정렬 문제입니다.

8
00:00:37,175 --> 00:00:43,204
항목들 중 한 부분에 정의한 키에 대해
n개의 항목을 가진 배열을 오름차순으로

9
00:00:43,204 --> 00:00:49,165
재정렬 해보도록 하죠. 이제, 우리가 할 일은
어떤 형식의 자료도 정렬 할 수 있게 하는거예요.

10
00:00:49,165 --> 00:00:55,608
자, 몇가지 클라이언트 프로그램을 살펴 보겠습니다.
첫번째는 단지 몇 개의 임의 실수를 오름차순으로 

11
00:00:55,608 --> 00:01:00,884
정렬하는 거구요. 그래서 여기에 삽입 정렬
메서드를 호출하는 클라이언트가 있고 

12
00:01:01,070 --> 00:01:07,068
표준입력에서 숫자들을 읽은 다음에
이를 배열에 저장하고 삽입 정렬을 호출 한다음

13
00:01:07,068 --> 00:01:12,515
결과를 출력하는 것이 할 일의 전부구요.
이렇게 하면 우측에 정렬된 순서대로 

14
00:01:12,515 --> 00:01:18,581
숫자들이 출력되는 것을 볼 수 있습니다. 
이 값들이 인위적으로 보이긴 하지만

15
00:01:18,581 --> 00:01:24,326
실제로 이번 강의에서도 활용사례를 
보게 될거예요. 음 그리고

16
00:01:24,326 --> 00:01:31,300
무작위 입력을 받은 괜찮은 모델을 지닌
프로그램이 있는데요. 여기에 문자열을

17
00:01:31,300 --> 00:01:37,934
정렬하는 좀 더 친근한 정렬 클라이언트가 
있어요. 에 ... 이 경우에는 파일을

18
00:01:37,934 --> 00:01:44,232
인자로 받아 In 클래스에 있는 readStrings()
함수를 사용해서 파일에 있는 문자열을

19
00:01:44,232 --> 00:01:50,186
읽어 오지요. 따라서 우리는 첫번째 명령 인자로 
파일 이름을 선택하고, 공백으로 구분된 

20
00:01:50,186 --> 00:01:56,389
문자열의 배열을 읽어서 Insertion.sort()를
다시 호출 합니다. 그래서

21
00:01:56,389 --> 00:02:03,047
Insertion.sort 는 인자로 배열을 받고, 
이것이 첫번째 인자이고,

22
00:02:03,047 --> 00:02:08,817
그 배열에 있는 문자열들을 정렬된 순서로
재정렬 합니다.

23
00:02:08,817 --> 00:02:15,571
따라서 이 경우의 단어, 단어에 대해, three.text에
몇가지 세글자 단어가 들어있고,

24
00:02:15,571 --> 00:02:22,014
이 클라이언트 프로그램에서는
이들 세글자 단어를

25
00:02:22,014 --> 00:02:27,673
철자순으로 다시 정렬합니다.
어떤 형식의 데이터를 정렬하는 목표를

26
00:02:27,914 --> 00:02:34,371
달성할 경우에 정렬 프로그램을 사용할 수 있는
다른 클라이언트 프로그램이 있습니다.

27
00:02:34,371 --> 00:02:41,249
이 경우 파일을 정렬하겠는데, 파일 이름은
디렉터리에 있습니다. 따라서 이 상황에서도

28
00:02:41,513 --> 00:02:49,508
Java에 있는 File 클래스를 사용하겠습니다.
주어진 디렉터리에 들어있는 모든 파일을

29
00:02:49,508 --> 00:02:56,788
배열을 통해 가져오기 위해 클래스에서
listFiles() 메서드를 사용하겠습니다.

30
00:03:00,205 --> 00:03:03,622
여기서 나오는 배열은 파일 이름이 들어갔으며,
Insertion.sort()에서는 첫번째 인자로 배열을 취하고

31
00:03:03,622 --> 00:03:10,287
이걸 다시 정렬합니다. 그러니까 이걸 있는 그대로
바로 사용하여, 배열 요소에 각각 하나씩 접근하고

32
00:03:10,287 --> 00:03:15,754
파일 이름을 순서대로 정렬했음을 확인하려
출력합니다. 따라서 세개의 각각의 클라이언트와

33
00:03:15,754 --> 00:03:20,494
세개의 완전히 다른 형식의 데이터가 있습니다.
그리고 게임의 첫번째 규칙은,

34
00:03:20,494 --> 00:03:25,508
각각의 세가지 형식의 데이터를 구현하는
세가지 클라이언트에 대해 

35
00:03:25,508 --> 00:03:30,591
하나의 정렬 프로그램을 
구현할 수 있으려면 

36
00:03:30,591 --> 00:03:35,804
어떻게 하는지를 생각하는 것입니다.
이런 방식을 통해 콜백이라는

37
00:03:35,804 --> 00:03:41,555
매커니즘이 일어납니다. 따라서, 
기본 질문으로 가자면, 이제, 어떻게 정렬할 수 있는지,

38
00:03:41,555 --> 00:03:46,629
항목의 핵심 형식에 대한 그 어떤 정보가
주어져 있지 않은 상태에서도

39
00:03:46,629 --> 00:03:52,692
서로 다른 형식의 데이터를 어떻게 비교할까요?
이에 대한 답이라면 정렬 함수에 배열 객체를 전달하여

40
00:03:52,692 --> 00:03:59,517
콜백과 같은 매커니즘을 설정하거나
어떤 클라이언트에서 코드를 실행했는지

41
00:03:59,517 --> 00:04:05,644
참조하는 것입니다.
자바에서는 객체 배열을 

42
00:04:05,644 --> 00:04:11,724
compareTo() 메서드로
넘겨 처리한 후에

43
00:04:11,724 --> 00:04:17,604
정렬 함수가 두 항목을 비교하려 할 때마다
객체 배열에 있는 compareTo() 메서드를

44
00:04:17,604 --> 00:04:22,351
호출하는 
암묵적인 매커니즘이 있습니다.

45
00:04:22,351 --> 00:04:26,645
콜백을 구현하는데는 
여러가지 방법이 있고요, 

46
00:04:26,645 --> 00:04:32,837
프로그래밍 언어 명세에 있습니다. 각각의 
언어는 서로 다른 매커니즘을 지니고 있고요.

47
00:04:32,837 --> 00:04:38,780
이런 함수형 프로그래밍에서 볼 수 있는 
다른 함수에 대한 인자역할을 하는

48
00:04:38,780 --> 00:04:45,206
전달 함수의 모든 개념이고요, 튜링이냐
교회냐로 되새겨 볼 수 있는 모든 수단을 생각

49
00:04:45,206 --> 00:04:50,553
합니다. Java에서는 컴파일 시간에 자료형을
점검하기 때문에, 인터페이스라고 하는

50
00:04:50,553 --> 00:04:56,246
특정 메서드를 사용하고요, Java 인터페이스로
콜백을 어떻게 구현하는지 구체적인

51
00:04:56,246 --> 00:05:01,040
내용을 지금부터 살펴볼거예요.
프로그래밍 언어쪽으로 조금 깊게 들어가긴

52
00:05:01,040 --> 00:05:06,086
하지만, 꽤 쓸모가 있을건데요,
자료형에 안전한 방식으로, 

53
00:05:06,086 --> 00:05:12,011
자료형 위주로 정렬을 할 수 있게 할거예요.
따라~서...

54
00:05:12,011 --> 00:05:18,084
이미 앞에서 몇가지 클라이언트를 살펴보았고요.
디렉터리의 파일 이름 목록을 파일 이름 순으로

55
00:05:18,084 --> 00:05:25,001
정렬하는 예제 클라이언트 프로그램입니다.
이걸 그냥 sort() 메서드라고 하고요,

56
00:05:25,001 --> 00:05:31,498
첫번째 인자에 임의의 객체 형식을 지닌 
배열이 들어갑니다. 이제, Java에 내장된걸

57
00:05:31,498 --> 00:05:37,939
Comparable 인터페이스라고 하고요,
모든 Comparable 인터페이스는

58
00:05:37,939 --> 00:05:45,024
각 형식에 대한 명세라 하고, 
비교할 수 있는 자료형에

59
00:05:45,024 --> 00:05:52,956
compareTo() 메서드를 넣겠습니다. 그리고요,
이건 제네릭이라 하고요, 항목 각각의 형식에 대해

60
00:05:52,956 --> 00:05:59,902
비교 동작을 취합니다. 이제 정렬할 
객체를 구현하면 Comparable 메서드를

61
00:05:59,902 --> 00:06:06,370
구현하겠습니다. 이건 comparable 파일을
구현한 최상위 클래스 파일이구요.

62
00:06:06,370 --> 00:06:13,351
여러 상황에서 정렬 동작을 사용하게 될테니,
정렬에 관여되리라 예상되는 대부분의 

63
00:06:13,351 --> 00:06:20,026
표준 Java 형식은 Comparable을 구현합니다.

64
00:06:20,026 --> 00:06:27,040
그리고 이 얘기들은, 자료형에 
compareTo() 메서드를 구현할 

65
00:06:27,040 --> 00:06:33,068
인스턴스 메서드를 넣을거라는 의미입니다.
인자로 주어진 객체와 이 객체를

66
00:06:33,068 --> 00:06:40,296
비교할 거구요. 몇가지 복잡한 시험에 따라,
보다 작으면 -1을 반환하고, 보다 크면 +1을

67
00:06:40,296 --> 00:06:46,181
크기가 같으면 0을 반환하겠습니다.
이제 compareTo() 메서드는

68
00:06:46,181 --> 00:06:50,726
정렬 구현에 정말 필요한 모든걸 갖췄습니다.
먼저, Comparable 형식의 배열을 인자로

69
00:06:50,726 --> 00:06:55,833
취하겠다 라고 하고 있지요.
그래서 여기서 무얼 말하려느냐 하면,

70
00:06:55,833 --> 00:07:02,023
배열의 객체는 
Comparable 인터페이스를 구현하거나

71
00:07:02,023 --> 00:07:08,000
compareTo() 메서드를 가진다는 의미가 되지요.
그리고 정렬 코드는 바로 compareTo() 메서드를

72
00:07:08,000 --> 00:07:13,052
사용할 수 있고요 배열의 항목이자 인자로서
객체에서 실행을 거친 다음에요

73
00:07:13,052 --> 00:07:19,012
배열의 다른 항목과 같은 객체의 
다른 인스턴스가 첫번째 항목이 두번째 항목보다

74
00:07:19,012 --> 00:07:24,092
작은지 아닌지 이 예제에서 
비교를 합니다. 여기서 핵심은요

75
00:07:24,092 --> 00:07:31,010
정렬 구현체는 자료형에 의존하지 않고요,
Comparable 인터페이스에서

76
00:07:31,010 --> 00:07:38,250
처리를 해주죠. 그리고요, 제각각의 
Comparable 배열은요, 마찬가지로

77
00:07:38,250 --> 00:07:44,862
같은 방식으로 정렬할텐데요, 
인터페이스 매커니즘 때문에

78
00:07:44,862 --> 00:07:50,944
정렬할 객체 형식에 따라 실제
compareTo() 코드를 되부름 처리하겠죠. 이제

79
00:07:50,944 --> 00:07:57,603
몇가지 규칙이 있고, 자연스러운 규칙도 있지만
언급할 가치가 있고요, compareTo() 메서드에

80
00:07:57,603 --> 00:08:05,112
관심을 가지면 전체 순서에 대한
구현체를 가지게 됩니다.

81
00:08:05,112 --> 00:08:13,220
여태까지 말씀드린 걸로 정렬 과정에서
정말로 순서대로 항목을 놓을 수 있어야

82
00:08:13,220 --> 00:08:19,133
하고요. 그래서 세가지 속성을 들었습니다.
첫번째의 경우는 v가 w보다 작거나 같고,

83
00:08:19,133 --> 00:08:25,857
w가 v보다 작거나 같으면, 
참이 되는 유일한 조건은

84
00:08:25,857 --> 00:08:31,495
서로 조건이 같을 경우고요, 이행이
가능할 경우입니다. v가 w보다 작고, w는

85
00:08:31,495 --> 00:08:36,736
x보다 작대요. 그러면 v는 아무리 못해도
x보다는 작거나 같아야만 하죠. 결국에는,

86
00:08:36,736 --> 00:08:42,785
v는 w와 작거나 같든가, w가 v보다
작거나 같으면 똑같다는 얘기구요.

87
00:08:43,003 --> 00:08:49,420
키를 정렬하는데 있어 보통 고려하려는
데이터 형식의 자연스러운 순서에는

88
00:08:49,420 --> 00:08:55,097
여러가지가 있습니다. 정수 또는
자연수, 실수 또는 문자열에 있어

89
00:08:55,097 --> 00:09:01,185
철자순서처럼, 날짜 또는 시간은 
연대순으로 되어 있고요

90
00:09:01,185 --> 00:09:07,280
다른 경우에도 마찬가집니다. 우측에 보이는 만화는
모든 순서가 전체적인 순서를 따를 필요가 없다는걸 

91
00:09:07,280 --> 00:09:12,643
보여줍니다. 그래서, 가위바위보는
자동사구요. v가 w보다 작고

92
00:09:12,643 --> 00:09:17,626
w는 v보다 작으면, v가 v보다
작거나 같은지는 모릅니다. 앗차,

93
00:09:17,626 --> 00:09:22,135
v가 w보다 작고 w가 x와 작거나 같으면
v가 x보다 작거나 같은지

94
00:09:22,135 --> 00:09:30,219
알 필요가 없죠. 좋습니다. 따라서
Java에서 보통 써오던 Comparable API는

95
00:09:30,219 --> 00:09:39,003
compareTo()를 구현하는데
필요하며, w와 비교하는 v는 

96
00:09:39,003 --> 00:09:46,852
완전한 순서를 따릅니다. 그리고 해오던 바대로
작으면 음수를,

97
00:09:46,852 --> 00:09:54,408
같으면 0을, 크면 양수를 반환합니다.
이 객체가 인자로 주어진 객체보다

98
00:09:54,408 --> 00:10:00,754
크다면요. 자료형이 맞지 않거나
둘 중에 하나가 널이면

99
00:10:01,011 --> 00:10:07,466
compareTo()에서 예외가 일어나야 합니다.
자, 다시요, 수많은 Java 표준 숫자, 날짜,

100
00:10:07,713 --> 00:10:15,012
파일 등에 대한 표준 자료형은
관례에 따라 compareTo()를 구현합니다.

101
00:10:15,207 --> 00:10:20,018
이제 자체 자료형을 구현한다면,
이러한 규칙에 따라

102
00:10:20,018 --> 00:10:24,092
Comparable 인터페이스를
구현해야 합니다. 그리고 보통

103
00:10:24,092 --> 00:10:30,065
거의 간단합니다.  따라서 여기에
예제를 보여드렸습니다. Date 클래스의

104
00:10:30,065 --> 00:10:37,099
단순화 버전이며 Java에서 구현했고,
Comparable 구현 방법을 보여주려는

105
00:10:37,099 --> 00:10:42,029
목적만 지니고 있습니다. 그래서 클래스
선언후, Comparable을 구현하고

106
00:10:42,029 --> 00:10:48,356
동일한 형식으로 제너릭 부분을 채워주어야
하는데 날짜와 다른 날짜만을

107
00:10:48,356 --> 00:10:53,712
비교하려 하기 때문입니다. 이
구현체에서, Date 클래스에는

108
00:10:53,712 --> 00:10:58,853
세개의 인스턴스 변수가 있습니다. 달,
일, 년 그리고 여러분이 보시는대로

109
00:10:58,853 --> 00:11:04,098
생성자에 해당 요소를 인자로 채웁니다.
따라서요, 두 개의 서로 다른 날짜를

110
00:11:04,098 --> 00:11:10,238
비교하려면 먼저 금년 연도가 
인자로 주어진 날짜의 

111
00:11:10,238 --> 00:11:15,696
해당 연도와 비교했을 때 
작은지 확인하는 것입니다. 만약 맞다면,

112
00:11:15,696 --> 00:11:20,291
작으면 -1을, 크면 +1을,
반환합니다.

113
00:11:20,292 --> 00:11:26,226
그렇지 않으면 연도는 같아야 하고,
비교할 월 수를 살펴보아야 하며,

114
00:11:26,226 --> 00:11:31,964
날짜로 단위가 내려갔을때도 마찬가집니다.
모두 같을 때만 0 값을

115
00:11:31,964 --> 00:11:36,054
반환합니다. 여러분이 기대한 순서대로
날짜를 놓기 위해 compareTo() 메서드를

116
00:11:36,054 --> 00:11:42,814
구현하는 방법을 통해 Comparable
구현 예제를 살펴보았습니다. 따라서,

117
00:11:42,814 --> 00:11:49,775
Java언어는 Comparable 매커니즘을 통해
우리를 번거로움에서 구해주므로, 어떤 형식의 데이터든 

118
00:11:49,775 --> 00:11:55,521
정렬할 수 있습니다. 정렬 알고리즘을 
계속 구현한다면, 자체 구현 내용속에도

119
00:11:55,521 --> 00:12:02,245
실제로 숨기기까지 합니다.
따라서 수많은 언어에서 정렬을

120
00:12:02,245 --> 00:12:08,728
구현하는데 활용할 수 있는 실제 코드가
정렬 알고리즘입니다.

121
00:12:08,728 --> 00:12:14,650
우리가 할 수 있는건 두개의 근본적인 처리 과정을
처리하는 것인데, 비교하고 나서

122
00:12:14,650 --> 00:12:20,614
저기 거기에 데이터를 참조하려고 있던걸
서로 바꾸고 정적 메서드로

123
00:12:20,614 --> 00:12:26,137
감싸줍니다.  그래서 두개의 Comparable
객체를 인자로 취해서 v.compareTo(w)가

124
00:12:26,137 --> 00:12:31,878
0보다 작을 때 값을 반환하는 
less() 메서드를 활용하겠습니다.

125
00:12:31,878 --> 00:12:39,218
그리고 나서 우리가 할 다른 일은
배열에 있는 항목을 정렬할 때

126
00:12:39,218 --> 00:12:45,861
주어진 i 인덱스와 j 인덱스의 각 항목을
서로 바꾸는 것입니다.

127
00:12:45,861 --> 00:12:52,166
그리고 이게 모든 프로그래머의
첫번째 할당 구문에 대한 소개구요.

128
00:12:52,166 --> 00:12:59,014
a[i]를 swap 변수에 저장하고, a[j]를 a[i]에
저장한 다음 swap변수 값을 a[j]로

129
00:12:59,014 --> 00:13:05,545
되돌려 놓습니다. 이렇게 하여 데이터를 참조하는
정렬 메서드는단지 두개의 정적 메서드를 

130
00:13:05,545 --> 00:13:10,872
활용합니다. 그리고 이 좋은 이유가 있는데
예제를 보여드리죠. 배열을 정렬했는지

131
00:13:10,872 --> 00:13:16,285
확인을 한다고 가정을 합시다. 그래서 배열을 
정렬했으면 TRUE, 배열 정렬이 안된 상태면 FALSE로 

132
00:13:16,285 --> 00:13:21,298
반환하는 메서드임을 가정하구요.
처음 배열에서 배열 길이번째까지

133
00:13:21,298 --> 00:13:26,411
쭉 이동하고 나서,
어떤 한 항목이 다른 하나보다

134
00:13:26,411 --> 00:13:31,440
이전에 작은지 확인합니다. 어떤 한 항목보다
작은 항목을 발견하면, 정렬이 되지 않았으므로

135
00:13:31,440 --> 00:13:36,352
FALSE를 반환합니다. 이런 일이 일어나지
않으면서 배열 각 항목의 비교과정이

136
00:13:36,352 --> 00:13:41,482
다 지나갔다면, 배열 상태가 TRUE라고 할 수 있습니다.
무지 단순한 코드죠. 근데 여기서 질문이 있는데요.

137
00:13:41,482 --> 00:13:47,415
시험을 통과한 정렬 알고리즘이
있다면, 배열을 올바르게 정렬한다고

138
00:13:47,415 --> 00:13:54,124
장담할 수 있나요? 흠, 그에 대한
대답이라면, 아마도 예..흠 아마도

139
00:13:54,124 --> 00:14:00,792
데이터를 참조하는데 less()와 exchange() 
메서드만 구현하려 활용했다면 예라고 할겁니다

140
00:14:00,792 --> 00:14:07,592
왜냐면, 저, 정렬하기 전에 배열에 있던 상태와
정렬한 후의 배열의 데이터가 같은

141
00:14:07,592 --> 00:14:13,489
exchange() 메서드를 사용했기 때문에
그 이후에 알게 되기 때문입니다.

142
00:14:13,489 --> 00:14:18,640
배열에 어떤 값을 값을 저장할 수 있는
정렬 메서드를 가졌다면, 예를 들어

143
00:14:18,640 --> 00:14:24,337
모든 배열 항목에 해당 메서드가 
이 시험을 통과하도록 0값을 채우지만,

144
00:14:24,337 --> 00:14:29,046
모든 값을 덮어쓰기 때문에 배열을
진짜로 제대로 정렬한게 아닙니다. 그래서 less()

145
00:14:29,046 --> 00:14:39,306
와 exchange() 메서드를 이런 메서드와, 우리,
우리가 만든 메서드가 함께 동작하는지 시험해볼 수 있게

146
00:14:39,306 --> 00:14:44,056
확인하려 활용합니다.