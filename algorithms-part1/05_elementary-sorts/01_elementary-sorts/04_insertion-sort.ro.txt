Acum ne vom uita la sortare prin inserție, care este o altă metodă elementară care are destul de interesante caracteristici de performanță diferite decât cele de sortare prin selecție. Să ne uităm la un demo al sortării prin inserție. Pentru sortare prin inserare, ceea ce vom face este vom muta un indice i de la stânga la dreapta ca înainte, dar acum, în iterația a i-a, noi vom muta a[i] în poziția printre elementele sale spre stânga. Să ne uităm la modul în care funcționează pe exemplul nostru cu cărți. Deci, acum începem prin inițializarea i la prima carte, și luăm ideea că totul de la i la stânga lui va fi sortat și iar la totul din partea dreaptă nu ne vom uita la deloc. Așa că totul în stânga i este în ordine crescătoare, totul la dreapta, nu l-am văzut încă tot. Deci, acum, când noi incrementăm i, bine, în acest caz, este deja în ordine, noi nu avem nimic altceva de făcut. În al treilea caz acum, când i este la a treia intrare în matrice, acum începem un indice j, și noi mișcăm aceea începând de la I la stânga. Și ce trebuie să facem este doar să schimbăm 5 cu fiecare element la stânga sa care e mai mare. Așa că mai întâi îl schimbăm cu 10, nu este încă la loc, astfel încât îl schimbăm cu 7. Acum vom ajunge la începutul matricii, și odată ce am făcut asta sau ne-am lovit de un element mai mic, atunci avem pe toată lumea în stânga lui i în ordine. Deci, acum incrementăm aceea din nou, și am ajuns la 3. Din nou, facem schimb de atâta timp cât cardul imediat la stânga este mai mare. Și odată ce am făcut asta, atunci avem totul la stânga în ordine crescătoare. Acum, în acest caz, avem 8, și avem doar să facem schimb, și acum are 7 la stânga și totul este în ordine. Așa că am realizat punerea în ordine, cu mai puțină muncă în acest caz. Noi nu trebuie întotdeauna să mergem tot drumul înapoi la început. 4, îl schimbăm cu tot ce e la stânga lui care e mai mare, până când vom găsi un element mai mic, atunci este în ordine crescătoare. 2 trebuie să meargă tot drumul înapoi la început. Dar, apoi chiar următorul, 9 trebuie să meargă înapoi numai o singură poziție, și 6 trebuie să meargă cam jumătate drumul înapoi. Și apoi am sortat întreaga matrice. Din nou, ne putem uita la sortare prin inserție în termeni de invarianți. Indicatorul nostru încă scanează de la stânga la dreapta, dar acum elementele din stânga cursorului, inclusiv el, sunt în ordine, dar elementele la dreapta nu au fost încă observate deloc. Așa că trebuie să ne uităm la codul care va menține acel invariant așa cum crește cursorul. Mutați cursorul spre dreapta, se incrementează din nou. Acum invariantul e stricat, deoarece elementul pe indicator nu este în ordine sortată. Pentru a-l pune în ordine sortată, trebuie să-l mutăm de la dreapta la stânga, schimbând-ul cu fiecare elemente mai mari spre stânga sa, și asta e ceea ce face codul de la partea de jos. Se pornește de la j la i, și decrementează j schimbând j cu elementele din stânga acestuia, a de j cu elementul său la stânga, a de j-1, atâta timp cât un a de j este mai puțin de a de j-1 sau j este mai mare decât 0. Și asta imediat dă acest cod pentru sortare prin inserție, care este similar cu codul nostru de sortare prin selecție și la fel de simplu. Are două bucle imbricate, sortarea prin selecție a avut două bucle imbricate, un test, o comparație, și un schimb interior pentru buclă. Și asta este o punere în aplicare fină a unei metode de sortare elementară. Cum rămâne cu analiza sortării prin inserție? E mai complicat. Propunerea noastră spune că sortarea prin inserție, pentru a sorta matrice ordonată aleator cu chei distincte, se va folosi aproximativ un sfert N la pătrat comparări, și aproximativ același număr, un sfert N la pătrat schimburi, în medie. Acest lucru este mai complicat de dovedit. Aceasta depinde de matrice fiind ordonat la întâmplare. Și din nou, puteți obține un sentiment pentru în cazul în care propunerea vine uitându-ne la această urmă N cu N. Din nou, elementele negre sunt cele pe care le comparăm, și de fapt, ele sunt, de asemenea, schimburile. Pe cel roșu este cel care în cele din urmă e pus la loc. Și puteți vedea că pentru o matrice mare, care e sortată la întâmplare, elementul pe care l-am pus la loc va merge aproximativ jumătate drumul înapoi în medie. Deci asta înseamnă că aproximativ jumătate din elementele de mai jos de diagonală vor fi negre în medie. Există N la pătrat peste 2 sub diagonală, jumătate din care este N pătrat peste 4. Analiza exactă nu este cu mult mai detaliată decât atât. Aceasta este o urmă mai mare, care arată, din nou, aproximativ jumătate din elementele de mai jos de diagonală sunt implicate în sortare. [TUSE] Să ne uităm la o animație. Din moment ce N la pătrat peste 4, față de N la pătrat peste 2, sortarea prin inserție va fi de aproximativ de două ori la fel de rapidă ca și sortarea prin selecție. Așa că putem face de două ori mai multe elemente în urme în aceeași perioadă de timp. Ea apucă un element și îl aduce înapoi în poziție de fiecare dată. Deci asta este o animație pentru articole sortate la întâmplare. Acum, sortarea prin inserție nu depinde de ordinea inițială a datelor. Să ne uităm la cel mai bun caz și cel mai rău caz, care sunt cu siguranță valori aberante. În cazul în care matricea se întâmplă să fie deja sortată, toată sortarea prin inserție face într-adevăr să valideze faptul că fiecare element are elemente mai mici, la stânga lui. Așa că nu face schimburi. Ea face treaba de sortare doar cu N minus 1 comparări. Pe de altă parte, în cazul în care matricea este în ordine descrescătoare și nu are duplicate, atunci fiecare element merge tot drumul înapoi. Se fac n la pătrat peste 2 comparări și n la pătrat peste 2 schimburi. Așa că, în primul caz, este mult, mult mai rapid decât sortare prin selecție, liniară în loc de pătratică. În al doilea caz, este mai lentă decât sortarea prin selecție, deoarece utilizează aproximativ același număr de comparări, dar utilizează mai multe schimburi. Așa că hai să vedem aceea în animație. Deci, acest lucru este atunci când elementele vin în ordine inversă. Acum, de fiecare dată când acesta devine un element nou, ea trebuie să-l schimbe tot drumul înapoi la început. Același tip de caracteristică dinamică ca sortarea prin selecție, cu excepția, pentru fiecare pas, nu doar compararea, ea, de asemenea, face schimb, ceea ce o face chiar mai lentă în practică. Deci, acesta este un caz rău pe care nu ne-am dori să-l vedem într-o aplicație practică. Dar există, de asemenea, un caz bun, de care de fapt să profităm într-o mulțime de aplicații practice. Și asta are de a face cu atunci când matricea este parțial sortată. Pentru a vorbi despre acest lucru într-un mod cantitativ, vom defini ceea ce se numește o inversare. O inversare este doar o pereche de chei, care sunt în afara ordinii în matrice. Astfel încât această matrice are șase inversiuni, T și R sunt în afara ordinii, pentru că R trebuie să meargă înainte de T. T și P sunt în afara ordinii, și așa mai departe. Această matrice are șase inversiuni. Și definim o matrice care urmează să fie parțial sortată în cazul în care numărul său de inversiuni este liniară, în cazul în care este mai mică de câteva ori constantă N. Și matrici parțial sortate apar adesea în practică. De exemplu, dacă aveți o matrice mare, cu doar câteva, care sunt sortate cu excepția a doar câteva elemente nesortate anexate la sfârșit, aceasta va fi parțial sortată. Sau, în alte cazuri, dacă aveți doar câteva intrări care nu sunt la loc, matricea va fi partial sortată. Aceste tipuri de lucruri apar adesea în aplicații practice. Și ce e interesant despre sortare prin inserție este că se execută în timp liniar pentru matricile parțial sortate. Iar dovada este, numărul de comparații și numărul schimburilor este egal cu numărul de schimburi egal cu numărul de inversiuni și există o extra comparare pentru fiecare element, cu excepția primului. Deci, să ne uităm la modul în care arată în animație. Iată o matrice parțial sortată, și puteți vedea că sortarea prin inserție face repede treaba. Noi vom profita de acest lucru un pic mai târziu în această prelegere. Asta e sortarea prin inserție, a doua noastră metodă de sortare elementară.