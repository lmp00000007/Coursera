El primer método elemental al que vamos a echar un vistazo en un fácil método conocido como ordenación por selección. La idea de la ordenación por selección es comenzar con un un vector (o array) no ordenado, usaremos una baraja de cartas como ejemplo, y en cada iteración, recorreremos el vector intentando encontrar la entrada más pequeña que quede, en este caso, el 2 es la entrada más pequeña, y a continuación lo intercambiaremos con la primera entrada del vector y así tendremos el paso uno completado. La ordenación por selección se basa en repetir esta idea. OK. Así que el método básico de ordenación por selección, es, en la i-ésima iteración, encontrar la entrada más pequeña que quede a la derecha de i, es decir con un indice mayor que i, y a continuación intercambiarlo con i. Así, al empezar, i está a la izquierda del todo y los restantes, todas las entradas restantes, a su derecha. Recorremos el vector y el más pequeño es el dos, la tercera entrada por la derecha, asi que lo intercambiamos. Y este es el primer paso. Ahora la parte del vector a la izquierda de i se encuentra ya ordenado y simplemente continuamos. Asi que ahora el más pequeño es el tres. Lo intercambiamos con i, e incrementamos i. Así que ahora tenemos dos y tres en orden, y continuamos. Encontramos el más pequeño, el cuatro. Lo intercambiamos con i, incrementamos i. Encontramos el más pequeño, que es el cinco, lo intercambiamos con i, incrementamos i. Encontramos el más pequeño, intercambiamos con i, incrementamos i. En cada iteración, tenemos que recorrer todas las entradas restantes para encontrar la más pequeña. Entonces, cuando la hayamos encontrado, solo tenemos que intercambiar dos cartas estas son las dos propiedades clave de la ordenación por selección. Ahora ocho es la más pequeña y la intercambiamos. Y ahora, sabemos que están en orden, pero el programa no, así que tenemos que comparar i y n y ver si son iguales y entonces se intercambia consigo misma y hace lo mismo por última vez. Y así, después de este proceso, ya sabemos que todo el vector esta ordenado, por completo. Bien. Una forma de entender la manera en que el algoritmo funciona es pensar en invariantes. Así, en la ordenación por selección, tenemos un puntero que es nuestra variable i, que recorre de izquierda a derecha. Esta indicado con una pequeña flecha roja en esta representación. Los invariantes son las entradas a la izquierda de la flecha, que nunca cambian y están en orden ascendente. Ninguna entrada a la derecha de la flecha es más pequeña que ninguna otra entrada a la izquierda de la misma. Esa es la manera en que lo hacemos. Y el algoritmo mantiene esos invariantes encontrando la entrada más pequeña de la derecha e intercambiandola con la siguiente. Así que el código implementa los invariantes. Así, para mover el puntero a la derecha, incrementamos i. Y ahora el invariante podría estar mal asi que tenemos que solucionarlo. Podría estar mal porque podríamos tener un elemento a la derecha del puntero que sea menor que el elemento del puntero. Así que lo que tenemos que hacer es identificar el índice de esa entrada con el valor más pequeño e intercambiarlo. Entonces, una vez que lo hayamos intercambiado, de nuevo, preservamos nuestro invariante. En este punto, ningún elemento a la izquierda del puntero va a cambiar y todos los elementos, no hay ningún elemento a la derecha [tos] y esto nos da inmediatamente nuestro código para la implementación de la ordenación por selección. Identificamos el, la longitud del vector, que es n. Entonces tenemos un bucle que recorre todos los elementos del vector, mantenemos una variable "min" que es el indice de, va a ser el indice del elemento más pequeño a la derecha del puntero i. Tenemos un bucle interno, ese "for j", si encuentra un elemento más pequeño, actualiza "min" y entonces cuando hemos mirado todos los elementos a la derecha de i, intercambiamos el más pequeño de ellos con i. Esta es la implementación completa del algoritmos de ordenación por selección. Ahora es fácil desarrollar un modelo matemático del coste de la ordenación por selección y aquí esta la proposición que lo describe. Esta selección usa unas N^2 / 2 comparaciones y exactamente N intercambios. Y mirando esta traza de la ordenación por selección realmente es una prueba, una prueba visual de esta proposición. En este diagrama, las entradas en negro, son las que son examinadas para encontrar el valor mínimo cada vez, con el mínimo en rojo. Las entradas en gris no se tocan, estan su posición final. Bien, como podéis ver, esto no va a ser normalmente una matriz de N por N y más o menos la mitad de los elementos en la matriz estan negros o sobre N^2 / 2 y puedes ver también la formula (N - 1) + (N - 2), que es numero total de comparaciones usadas. Y entonces en cada uno de los N valores de la variable i hay un intercambio que es el coste en términos de numero de intercambios. Ahora, lo que es interesante de esta proposición del método de ordenación por selección es que, no importa en que orden este la entrada. El método de selección va a usar N al cuadrado veces porque siempre tiene que recorrer todo el vector para buscar el valor mínimo. Y otra propiedad es que no se puede conseguir mover menos datos porque la selección por selección hace exactamente un numero linear de intercambios. Cada elemento es puesto en su posición final con solo un intercambio. Veamos una animación de la ordenación por selección en funcionamiento. [Tos] Podéis ver nuestro puntero moviéndose de derecha a izquierda cada vez que encuentra el elemento más pequeño a la derecha lo coloca en su posición. Ahora, si es vector esta parcialmente ordenado, no le importa a este método. También tendrá, aunque este completamente ordenado, también tendrá que recorrer hasta el final buscando donde esta el elemento más pequeño. Esta es la ordenación por selección, nuestro primer método de ordenación elemental.