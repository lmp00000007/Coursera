良いでしょう。もう私たちは巨大な対象に対する
統合問題を解くための 効率的な実装を見てきましたから、
どのようにその実装が応用されているか 見ていきましょう。
Union-findのアプリケーションは数多くあります。 私たちはネットワーク上の動的接続性について
話しましたが、それ以外にも 計算機基盤では問題例がたくさんあります。
一番下には、画像処理の分野での 画像内の領域へのラベル付け問題という
重要な問題の例がありますね。 後ほど、クラスカルの最小スパニングツリー
アルゴリズムを見ていきます。 これは、グラフ処理のアルゴリズムで、
サブルーチンとしてUnion-findを使います。 物理学の分野でも例に示すとおり、
物理現象の理解のためのアルゴリズムがありますし、 このリストには他にもたくさんあります。
それでは、ここではそのうちの１つ、浸透問題についてお話します。 多くの物理系のモデルであり、
ここでは抽象化したモデルを示し 物理系にどのように応用されているか
簡単にお話します。 サイトと呼ばれるn×nのグリッドを
考えましょう。各サイトが 確率pで開いているとき白で、 確率(1-p)で閉じているとき黒で表示しています。
このとき、系が浸透されているとは 開いているサイトで上下が
接続されていることを言います。 左側の絵の系では、上下が白の
四角で通れる道が見つかりますが、 右側の絵の系では浸透しません。 上下が白い四角でつながる道がないからです。 これは多くの系に対するモデルになっています。
電気回路を考えれば良いでしょう。 白のサイトはコンダクタで、
黒のサイトは絶縁されていると考えます。 上下間でコンダクタがあれば電気が通じます。 あるいは、何か多孔質物質に
水を通す場合などを考えても良いでしょう。 この場合、空きサイトは空洞で、
黒サイトは何か物質があります。 それで、上から下に向かって水が通るか
どうか、という問題です。 あるいはソーシャルネットワークを
考えても良いでしょう。この場合、対象は人であり、 ２人の間がつながっているかどうか、
あるグループから別のグループへの つながりがソーシャルネットワークに
あるかが問題になります。 これらが浸透問題のちょっとした例です。
ランダム化したモデルで話すと、 サイトは与えられた確率で空きになります。
そのため、空きの確率pが 低い左の図の場合ですと、
２つ図面の例がありますが、 浸透しないのは極めて明快です。 上下が接続できるだけの空きサイトが
十分にないですから。 確率が大きいと空きサイトがたくさん
ありますので、間違いなく浸透するでしょう。 上下間を行き来できる道はたくさんできるでしょう。
しかし、真ん中の例のように 確率が中くらいの場合、浸透するかしないかは疑問です。 ですので、このモデルから得られる
科学的、あるいは数学的問題というのは 浸透するのかしないのかを
どうやって知るのかということです。 この問題や多くの似た問題に
相転移というものがあります。 これは、確率が低ければ浸透しませんし、
高ければ浸透しますが、 実際には浸透するかしないかの
境にある閾値は とても鋭いものです。
そして実際に、Nが大きくなると 確率がある値より小さいと
ほぼ確実に浸透せず、 ある値より大きいとほぼ確実に浸透する、
という値があります。問題はその値がいくつか、です。 これは数学モデルの一例で、
とても歯切れの良いものです。 閾値がいくつか、なのですから。
しかし、この数学的問題の解を誰も知りません。 この問題の唯一の解は計算モデルから
得られるものです。 実際にシミュレーションを実行し、
確率値を決定しているのです。 これらのシミュレーションは、
高速Union-findアルゴリズムをもってのみ解決できます。 これが高速Union-findアルゴリズムが必要となる
動機付けになる例です。では見てみましょう。 ここで動かしているのはいわゆる
モンテカルロシミュレーションです。 ここでは、いったんすべてのグリッドを
黒にしておき、ランダムに 空きサイトにします。これを続けていき、
空きサイトを増やすごとに 系が浸透するかどうか確認します。
これを系が浸透する点に達するまで 続けます。そのとき、浸透したときの
空きサイト率がわかるので、 それが閾値の推測値ということになります。 ですので、ここで行いたいことは、
この実験を数百万回と計算機上でできる限り行いたいのです。 浸透するかしないかの計算を
効率よく行ってです。 これがモンテカルロシミュレーションで、
計算機上の問題であり、このような 科学的問題で、数学的に誰も
解き方が分からない問題を解くことができます。 それでは、モンテカルロ法を用いるために
動的接続問題をどのように使っているか もう少し詳しく見てみましょう。
各サイトに対応したオブジェクトを 作るということは明らかですね。そして、
ここに示すように、各サイトに 0からNの２乗マイナス１の名前を付けます。
そしてこれらを接続します。 左図の浸透モデルが右図の接続モデルに 対応します。これは今まで私たちが
行ってきたものですね。 ここでやりたいのは、一番下の列の
どのサイトでも良いのですが、 それが一番上の列のサイトに
接続されているかを確認することです。 これを解く際の問題は、総当たりアルゴリズム
でしょう。それですと２乗の 計算量になってしまいます。接続されているかを
確認するためにfindをNの２乗回呼ぶからです。 一番上の列の各サイトについて、
一番下の列の各サイトへの接続を確認します。 これはとても遅いです。代わりに、一番上および
一番下に仮想サイトを１つ作ります。 それからこの系が浸透するかどうかを知りたいとすれば、 仮想的な一番上のサイトから一番下のサイトまで
連結しているかを確認すれば良いことになります。 新しいサイトを開けるにはどうすれば
良いでしょう？それには、単純に 周辺の開きサイトと連結させれば良いだけです。
これはUnion操作を数回実行するだけなので、実装は簡単です。 この関係性だけを用いて、
コードを実際に書き、 この連結問題に関する
シミュレーションを実行してみました。 ここで得られた答えは、十分大きなNに対して
十分な回数を行ったところ、 浸透する閾値はおおよそ0.592746です。 この高速なアルゴリズムを用いれば、
科学的問題に対しても正確な答えが得られるのです。 もし遅いUnion-findアルゴリズムを使っていたら、
とても大きな問題には実行できなかったでしょうし、 正確な値は得られなかったでしょう。
まとめますと、重要な問題を取り上げました。 動的接続問題です。私たちはこの問題を
モデル化し、問題を解くのに必要な データ構造やアルゴリズムがどんなものか
正確に理解しようとしました。 この問題を解く簡単なアルゴリズムを
見て、すぐにそれが 巨大な問題を相手にするには不適切だと見抜きました。
しかし、より効率的なアルゴリズムを使ってどのように改良するかを見て、 それから、このような効率の良いアルゴリズムを 用いなくては解けない応用問題も見ました。
これらはすべて科学的な方法です。 アルゴリズムの設計では、
数学モデルを開発しようと努めて、 これから開発しようとするアルゴリズムの
特性の理解に役立てようとしました。 実験を通してこのモデルをテストし、 アルゴリズムを改良できるようにしました。
繰り返し、より良いアルゴリズムを開発し、 より良いモデルを作り、それを関心のある問題を
実用的に解くのに必要なところまで改良しました。 この方法が、本コースを通して使用していく
アルゴリズム学習のための 全体像となります。