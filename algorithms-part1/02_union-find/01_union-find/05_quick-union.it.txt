Allora dato che il QuickFind è troppo lento
per problemi di grandi dimensioni. Come possiamo fare meglio? Il nostro primo tentativo è
l'alternativa chiamata Quick-union. Questo è quello che vieneì chiamato approccio pigro alla struttura
dell'algoritmo dove noi cerchiamo di evitare il lavoro fino a che lo dobbiamo fare. Utilizza la stessa
struttura dati, un array id[i] di dimensione M, ma ora ha un significato diverso. Dobbiamo
pensare che questo array rappresenti un insieme di alberi, ciò che
si chiama foresta, come illustrato sulla destra. Ogni valore dell'array conterrà un
puntatore al suo genitore nell'albero. Così, per esempio, il genitore di 3 è 4,
il genitore di 4 è 9. Così il valore di 3 è 4 e il valore di 4 nell'array è 9. Ogni valore
nell'array è collegato ad una radice. Questa è la radice del suo stesso albero.
Gli elementi che sono isolati che sono connessi con se stessi,
puntano a se stessi, quindi uno punta a se stesso, ma anche 9 punta a se stesso, quindi
è la radice dell'albero che contiene due elementi 4 e 3. Così, da questa struttura dati
possiamo associare ad ogni elemento una radice, che rappresenta, diciamo,
la sua componente connessa. In questo modo risalendo alla radice troviamo che la radice di 3 è  9.
Ora se noi possiamo calcolare queste radici allora possiamo anche implementare l'operazione di ricerca
semplicemente controllando se due elementi quelli che stiamo controllando con l'algoritmo,
siano collegati nel caso abbiano la stessa radice. Questo equivale a chiedersi:sono nello
stesso componente collegato? Così richiede un pò di lavoro, trovare la radice di ognuno,
ma l'operazione di unione è molto semplice. Come unire componenti che contengano
due elementi differenti, cioè due elementi che siano in componenti diversi. Tutto quello che facciamo
è porre l'id[i] della radice di P come id[i] della radice di Q Poniamo che sia l'albero di P a puntare a quello
di Q. In questo caso cambiamo il valore di 9 in 6 per unire 3 e 5. Abbiamo i componenti
che contengono 3 e 5. Cambiando solo un valore dell'array
otteniamo l'unione di due grandi elementi. Questo è l'algoritmo Quick-union.
Se l'operazione di unione richiede solo il cambiamento di un ingresso nell'array
l'operazione di ricerca richiede un po più di lavoro. Vediamo ora l'implementazione,
Prima una dimostrazione dell'operazione. Iniziamo di nuovo nello stesso modo, ma
ora il valore id[i] significa proprio che ognuno di questi oggetti è un piccolo
albero, dove ogni nodo punta a se stesso. E' la radice del suo stesso albero.
Così se ora dobbiamo mettere 4 e 3 nell stesso componente, tutto quello che facciamo
è prendere la radice, del componente contenente il primo elemento e ne facciamo un figlio
della radice del componente che contiene il secondo elemento. In questo caso
abbiamo reso 4 padre di 3. Ora vediamo 3 e 8. Di nuovo prendiamo il primo
elemento e lo rendiamo un figlio della radice dell'albero che contiene il secondo elemento.
Ora 3, 4 e 8 sono nello stesso componente. Riguardo 6 e 5, 6
va sotto cinque. Vediamo 9 e 4. Ora 4 e la radice dell'albero contenente quattro
è 8. La radice dell'albero che contiene 9 è 9. Ora facciamo che 9 diventi figlio
di 8. 2 e 1 sono facili da unire. Ora che abbiamo connesso 8 e 9
verifichiamo che essi abbiano la stessa radice ed entrambi hanno proprio
la stessa radice 8 quindi sono connessi. Vediamo 5 e 4. La radice di 4 è 8,
quella di 5 è 5. Sono differenti. Non sono connessi. Vediamo 5 e zero con 5 che
diventa un figlio di zero. Vediamo 7 e 2 con 7 che diventa figlio della radice di 2 che è 1.
Vediamo 6 e 1. La radice di 6 è zero, è radice di se stesso, così zero diventa figlio di 1.
Ognuna di queste operazioni di unione comporta solo il cambiamento di un valore dell'array.
E alla fine, vediamo 7 e 3. Così la radice di 7 è uno, la radice di 3 è 8, e 1 diventa figlio
di 8. Ora abbiamo un unico oggetto connesso con tutti gli elementi
collegati tra loro. Molto bene, ora diamo un'occhiata al codice per implementare Quick-union.
Il costruttore è lo stesso dell'algoritmo precedente Creiamo l'array e poi inizializziamo ogni
elemento per essere radice di se stesso. Ora abbiamo un metodo privato per implementare il
processo della ricerca della radice cercando i puntatori dei genitori, fino al punto in cui i
è uguale al valore di id[i]  e se non lo è noi spostiamo i su di un livello nell'albero,
poniamo i uguale al valore id[i] e lo restituiamo. Così partendo da qualsiasi nodo si considera
il valore contenuto per vedere se è uguale al valore
di id[i]. fino a che sono uguali e se lo sono sei arrivato alla radice. Questo è
un metodo privato che possiamo usare per implementare l'operazione di ricerca
o quella di collegamento. Si trovano semplicemente la radice di P e la radice di Q e si verifica
che siano uguali. Poi l'operazione di unione è semplicemente trovare le due radici e
porre che l'id[i] del primo diventi quello del secondo. In realtà abbiamo meno codice di
quello usato per Quick Find, non ci sono cicli for. C'è questo loop che ci deve spaventare
un pò. Ma è una implementazione veloce ed elegante del codice per risolvere il problema
della connessione dinamica chiamato Quick-union. Ora ci chiediamo questo
codice è efficace per risovere problemi di grandi dimensioni? Sfortunatamente
Quick-union è veloce, ma è ancora troppo lento. Il suo essere lento è diverso dalla
lentezza di Quick Find, ci sono volte che può essere veloce, ma ci sono anche volte
che è ancora troppo lento. Il difetto per Quick-union è che l'albero può
crescere troppo. Questo significa che l'operazione di ricerca diventa
troppo costosa. La puoi liquidare con un albero profondo senza foglie. Ogni elemento punta
solo al successivo così una operazione di ricerca per ggetti in profondità significherà
percorrere tutto l'albero. I costi della ricerca in ampiezza 
dell'operazione di ricerca rendono l'algoritmo troppo lento se servono
molte operazioni.